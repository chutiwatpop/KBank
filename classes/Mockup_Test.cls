public class Mockup_Test {
    public static String userFirstNameRM = 'FirstNameRM';
    public static String userLastNameRM = 'LastNameRM';
    public static String userFirstNameRM2 = 'FirstNameRM2';
    public static String userLastNameRM2 = 'LastNameRM2';
    public static String userFirstNameTM = 'FirstNameTM';
    public static String userFirstNameRBSTM = 'FirstNameRBSTM';
    public static String userLastNameTM = 'LastNameTM';
    public static String userFirstNameAH = 'FirstNameAH';
    public static String userLastNameAH = 'LastNameAH';
    public static String userFirstNameNH = 'FirstNameNH';
    public static String userLastNameNH = 'LastNameNH';
    public static String userFirstNameCBRM = 'FirstNameCBRM';
    public static String userLastNameCBRM = 'LastNameCBRM';
    public static String userFirstNameCBRM2 = 'FirstNameCBRM2';
    public static String userLastNameCBRM2 = 'LastNameCBRM2';
    public static String userFirstNameCBTM = 'FirstNameCBTM';
    public static String userLastNameCBTM = 'LastNameCBTM';
    public static String userFirstNameCBTL = 'FirstNameCBTL';
    public static String userLastNameCBTL = 'LastNameCBTL';

    public static String userFirstNameCBSTL = 'FirstNameCBSTL';
    public static String userLastNameCBSTL = 'LastNameCBSTL';
    public static String userFirstNameCBTLSubordinate = 'FirstNameCBTLsubOr';
    public static String userLastNameCBTLSubordinate = 'LastNameCBTLsubOr';

    public static String userCBSFirstNameRM = 'FirstCBSNameRM';
    public static String userCBSLastNameRM = 'LastCBSNameRM';
    public static String userCBSFirstNameRM2 = 'FirstCBSNameRM2';
    public static String userCBSLastNameRM2 = 'LastCBSNameRM2';
    public static String userCBSFirstNameTM = 'FirstCBSNameTM';
    public static String userCBSLastNameTM = 'LastCBSNameTM';
    public static String userCBSFirstNameTL = 'FirstCBSNameTL';
    public static String userCBSLastNameTL = 'LastCBSNameTL';
    
    public static String userRbsFirstNameRM = 'FirstRbsNameRM';
    public static String userRbsLastNameRM = 'LastRbsNameRM';
    public static String userRbsFirstNameRM2 = 'FirstRbsNameRM2';
    public static String userRbsLastNameRM2 = 'LastRbsNameRM2';


    public static String userAFFirstNameRM = 'FirstNameAFRM';
    public static String userAFLastNameRM = 'LastNameAFRM';
    public static String userAFFirstNameTM = 'FirstNameAFTM';
    public static String userAFLirstNameTM = 'LastNameAFTM';
    public static String userAFFirstNameAH = 'FirstNameAFAH';
    public static String userAFLastNameAH = 'LastNameAFAH';
    public static String userAFFirstNameNH = 'FirstNameAFNH';
    public static String userAFLastNameNH = 'LastNameAFNH';

    public static String userFirstNameRMActive = 'FirstNameRMActive';
    public static String userLastNameRMActive = 'LastNameRMActive';
    public static String userFirstNameTMActive = 'FirstNameTMActive';
    public static String userLastNameTMActive = 'LastNameTMActive';
    public static String userFirstNameAHInactive = 'FirstNameAHInactive';
    public static String userLastNameAHInactive = 'LastNameAHInactive';
    public static String userFirstNameNHInactive = 'FirstNameNHInactive';
    public static String userLastNameNHInactive = 'LastNameNHInactive';

    public static String userFirstNameRMDiff = 'FirstNameRMDiff';
    public static String userLastNameRMDiff = 'LastNameRMDiff';
    public static String userFirstNameTMDiff = 'FirstNameTMDiff';
    public static String userLastNameTMDiff = 'LastNameTMDiff';
    public static String userFirstNameAHDiff = 'FirstNameAHDiff';
    public static String userLastNameAHDiff = 'LastNameAHDiff';

    public static String userFirstNameAdmin = 'FirstNameAdmin';
    public static String userLastNameAdmin = 'LastNameAdmin';
    
    public static String userFirstNameCBSAdmin = 'FirstNameCBSAdmin';
    public static String userLastNameCBSAdmin = 'LastNameCBSAdmin';

    public static String userFirstNameFranchiseRM = 'FirstNameFranchiseRM';
    public static String userLastNameFranchiseRM = 'LastNameFranchiseRM';
    public static String userFirstNameFranchiseTM = 'FirstNameFranchiseTM';
    public static String userLastNameFranchiseTM = 'LastNameFranchiseTM';

    public static String userFirstNameCBEVP = 'FirstNameCBSEVP';
    public static String userLastNameCBEVP = 'LastNameCBSEVP';
    public static String userCBSEmpIdEVP = '1000000001';
    public static String userFirstNameCBFSVP = 'FirstNameCBSFSVP';
    public static String userLastNameCBFSVP = 'LastNameCBSFSVP';
    public static String userCBSEmpIdFSVP = '1000000002';

    public static String nhRoleDeveloperName = 'nhAreaRole';
    public static String ahRoleDeveloperName = 'ahAreaRole';
    public static String tmRoleDeveloperName = 'tmAreaRole';
    public static String rmRoleDeveloperName = 'rmAreaRole';
    public static String tlCBRoleDeveloperName = 'tlCBAreaRole';
    public static String tmCBRoleDeveloperName = 'tmCBAreaRole';
    public static String rmCBRoleDeveloperName = 'rmCBAreaRole';

    public static String tlCBSRoleDeveloperName = 'tlCBSAreaRole';
    public static String tmCBSRoleDeveloperName = 'tmCBSAreaRole';
    public static String rmCBSRoleDeveloperName = 'rmCBSAreaRole';

    public static String nhTeamName = 'เครือข่ายลูกค้าผู้ประกอบการ 2 nhTeam';
    public static String ahTeamName = 'ahTeamName';
    public static String tmTeamName = 'tmTeamName';
    public static String rmTeamName = 'rmTeamName';
    public static String tlTeamName = 'tlTeamName';

    public static String ahRoleDeveloperNameDiff = 'ahAreaRoleDiff';
    public static String tmRoleDeveloperNameDiff = 'tmAreaRoleDiff';
    public static String rmRoleDeveloperNameDiff = 'rmAreaRoleDiff';

    public static String tlCBSRoleDeveloperNameDiff = 'tlCBSAreaRoleDiff';
    public static String tmCBSRoleDeveloperNameDiff = 'tmCBSaRoleDiff';
    public static String rmCBSRoleDeveloperNameDiff = 'rmCBSAreaRoleDiff';

    public static String userEmpIdRM = '1000000003';
    public static String userEmpIdRM2 = '1000000004';
    public static String userEmpIdTM = '1000000005';
    public static String userEmpIdAH = '1000000006';
    public static String userEmpIdNH = '1000000007';
    public static String userEmpIdRMCB = '1000000008';
    public static String userEmpIdTMCB = '1000000009';
    public static String userEmpIdTLCB = '1000000010';
    public static String userEmpIdRMActive = '1000000011';
    public static String userEmpIdTMActive = '1000000012';
    public static String userEmpIdAHInactive = '1000000013';
    public static String userEmpIdNHInactive = '1000000014';
    public static String userEmpIdRMDiff = '1000000015';
    public static String userEmpIdTMDiff = '1000000016';
    public static String userEmpIdAHDiff = '1000000017';
    public static String userEmpIdFranchiseRM = '1000000018';
    public static String userEmpIdFranchiseTM = '1000000019';

    public static String userCBSEmpIdTL = '1000000020';
    public static String userCBSEmpIdTM = '1000000021';
    public static String userCBSEmpIdRM = '1000000022';
    public static String userCBSEmpIdRM2 = '1000000023';

    public static String userCBSEmpIdSTL = '1000000024';
    public static String userCBSEmpIdTLsubOr = '1000000025';

    public static String userEmpIdAdmin = '1000000026';
    public static String userEmpIdCBSAdmin = '1000000027';

    public static String userEmpIdRMRBS = '1000000028';
    
    public static String RC_CODE = '41404';
    public static String AH_RC_CODE = '41400';
    public static String NH_RC_CODE = '41206';
    public static String RC_CODE_ACTIVE = '41407';
    public static String AH_RC_CODE_INACTIVE = '41408';
    public static String NH_RC_CODE_INACTIVE = '41209';
    public static String CB_RC_CODE = '41501';
    public static String TL_CB_RC_CODE = '41500';

    public static String FRANCHISE_RC_CODE = '22222';
    public static String FRANCHISE_NAME = 'แฟรนไชส์';
    public static String FRANCHISE_DEVELOPER_NAME = 'RC22222';

    public static String teamSegment1 = 'Test Seg1';
    public static String teamSegment2 = 'Test Seg2';
    public static String teamSegment3 = 'Test Seg3';

    public static String nhANRCCode = 'NHANRC';
    public static String ahANRCCode = 'AHANRC';
    public static String tmANRCCode = 'ANRC';

    public static String nhANTeamName = 'nhANTeamName';
    public static String ahANTeamName = 'ahANTeamName';
    public static String tmANTeamName = 'tmANTeamName';

    public static String teamSegment = 'testSegment';

    public static String nhANUserFirstName = 'nhANUserFirstName';
    public static String ahANUserFirstName = 'ahANUserFirstName';
    public static String tmANUserFirstName = 'tmANUserFirstName';
    public static String rmANUserFirstName = 'rmANUserFirstName';

    public static String nhANUserLastName = 'nhANUserLastName';
    public static String ahANUserLastName = 'ahANUserLastName';
    public static String tmANUserLastName = 'tmANUserLastName';
    public static String rmANUserLastName = 'rmANUserLastName';

    public static String nhANEmpId = '1000000029';
    public static String ahANEmpId = '1000000030';
    public static String tmANEmpId = '1000000031';
    public static String rmANEmpId = '1000000032';

    public static Map<String,Profile> mapProfileByName;

    public static Id getRecordTypeCampaignIdByName(String name){
        return Schema.SObjectType.Campaign.getRecordTypeInfosByName().get(name).getRecordTypeId();
    }
    public static Id getRecordTypeAccountIdByName(String name){
        return Schema.SObjectType.Account.getRecordTypeInfosByName().get(name).getRecordTypeId();
    }

    public static Profile getMapProfileByName(String profileName) {
        if(mapProfileByName == null) {
            mapProfileByName = new Map<String, Profile>();
            List<Profile> listProfile = new List<Profile>();
            listProfile = [SELECT Id,Name FROM Profile];
            for(Profile eachProfile : listProfile){
                mapProfileByName.put(eachProfile.Name, eachProfile);
            }
        }
        return mapProfileByName.get(profileName);
    }

    public static void setJobCodeFromProfile() {
        Profile nhProfile = getMapProfileByName(GlobalConstants.SME_NH);
        insert new Job_Code__c(Name = 'ME1A', Profile_Name__c = nhProfile.Name);
        
        Profile ahProfile = getMapProfileByName(GlobalConstants.SME_AH);
        insert new Job_Code__c(Name = 'ME2A', Profile_Name__c = ahProfile.Name);
    
        Profile tmProfile = getMapProfileByName(GlobalConstants.SME_TM);
        insert new Job_Code__c(Name = 'ME3A', Profile_Name__c = tmProfile.Name);
      
        Profile rmProfile = getMapProfileByName(GlobalConstants.SME_RM);
        insert new Job_Code__c(Name = 'ME4A', Profile_Name__c = rmProfile.Name);

        Profile nhANProfile = getMapProfileByName(GlobalConstants.AN_NH);
        insert new Job_Code__c(Name = 'AN1A', Profile_Name__c = nhANProfile.Name);
        
        Profile ahANProfile = getMapProfileByName(GlobalConstants.AN_AH);
        insert new Job_Code__c(Name = 'AN2A', Profile_Name__c = ahANProfile.Name);
    
        Profile tmANProfile = getMapProfileByName(GlobalConstants.AN_TM);
        insert new Job_Code__c(Name = 'AN3A', Profile_Name__c = tmANProfile.Name);
      
        Profile rmANProfile = getMapProfileByName(GlobalConstants.AN_RM);
        insert new Job_Code__c(Name = 'AN4A', Profile_Name__c = rmANProfile.Name);

        Profile rmCBSProfile = getMapProfileByName(GlobalConstants.CBS_RM);
        insert new Job_Code__c(Name = 'ME5A', Profile_Name__c = rmCBSProfile.Name);

        Profile tmCBSProfile = getMapProfileByName(GlobalConstants.CBS_TM);
        insert new Job_Code__c(Name = 'ME6A', Profile_Name__c = tmCBSProfile.Name);

        Profile tlCBSProfile = getMapProfileByName(GlobalConstants.CBS_TL);
        insert new Job_Code__c(Name = 'ME7A', Profile_Name__c = tlCBSProfile.Name);
    }

    public Mockup_Test setUpTestOnlyAdmin() {
        Mockup_Test.setUpCustomSetting();
        return this.setUpTestAdmin();
    }
    public Mockup_Test setUpTestAdmin() {       
        List<User> userToInsert = new List<User>();
        System.runAs(new User(Id=UserInfo.getUserId())){
            UserRole adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_Admin'];
            Id adminProfileId = getMapProfileByName(GlobalConstants.SME_ADMIN).Id;
            
            User admin = Mockup_Test.newUser(
                Mockup_Test.userFirstNameAdmin,
                Mockup_Test.userLastNameAdmin,
                true,
                'FirstNameAdmin@mail.com',
                'FirstNameAdmin@mail.com',
                'admin',
                adminProfileId,
                adminRole.Id,
                null,
                null
            );
            admin.Employee_ID__c = Mockup_Test.userEmpIdAdmin;
            userToInsert.add(admin);

            Id cbsadminProfileId = getMapProfileByName(GlobalConstants.CBS_ADMIN).Id;
            User cbsadmin = Mockup_Test.newUser(
                Mockup_Test.userFirstNameCBSAdmin,
                Mockup_Test.userLastNameCBSAdmin,
                true,
                'FirstNameCBSAdmin@mail.com',
                'FirstNameCBSAdmin@mail.com',
                'admin',
                cbsadminProfileId,
                adminRole.Id,
                null,
                null
            );
            cbsadmin.Employee_ID__c = Mockup_Test.userEmpIdCBSAdmin;
            userToInsert.add(cbsadmin);

            if(userToInsert.size()>0) insert userToInsert;
        }

        setUpCustomSettingAdmin();
        return this;
    }

    public static void setUpCustomSettingConnectionAttribute() {
        List<ConnectionAttribute__c> attrList = new List<ConnectionAttribute__c>();
        attrList.add(new ConnectionAttribute__c(Name = 'CITimeout', AttributeValue__c ='120000'));
        attrList.add(new ConnectionAttribute__c(Name = 'httpPassword', AttributeValue__c ='rmst_723'));
        attrList.add(new ConnectionAttribute__c(Name = 'httpUsername', AttributeValue__c ='rmst_723'));
        insert attrList;
    }
    
    public static void setUpCustomSetting() {       
        List<User_Management__c> umList = new List<User_Management__c>();
        System.runAs(new User(Id=UserInfo.getUserId())){
            Id ahProfileId = getMapProfileByName(GlobalConstants.SME_AH).Id;
            Id tmProfileId = getMapProfileByName(GlobalConstants.SME_TM).Id;
            Id rmProfileId = getMapProfileByName(GlobalConstants.SME_RM).Id;
            Id adminProfileId = getMapProfileByName(GlobalConstants.SME_ADMIN).Id;
            
            umList.add(new User_Management__c(
                    SetupOwnerId = UserInfo.getProfileId(),
                    Allow_User_Edit__c = true,
                    Allow_Change_Opportunity__c = true,
                    Allow_to_Create_Target_List__c = true,
                    Allow_Change_to_Activities__c = true
                ));
            umList.add(new User_Management__c(
                    SetupOwnerId = ahProfileId,
                    Allow_User_Edit__c = true,
                    Allow_Change_Opportunity__c = true
                ));
            umList.add(new User_Management__c(
                    SetupOwnerId = tmProfileId,
                    Allow_User_Edit__c = true,
                    Allow_Change_Opportunity__c = true
                ));
            umList.add(new User_Management__c(
                    SetupOwnerId = rmProfileId,
                    Allow_User_Edit__c = true,
                    Allow_Change_Opportunity__c = true
                ));
            umList.add(new User_Management__c(
                    SetupOwnerId = adminProfileId,
                    Allow_User_Edit__c = true,
                    Allow_Change_Opportunity__c = true,
                    Allow_Change_to_Activities__c = true
                ));
            insert umList;

            List<Chatter_Group_Name__c> listCustomSettingGroupName = new List<Chatter_Group_Name__c>();
            Chatter_Group_Name__c customSettingGroupMeName = new Chatter_Group_Name__c(Name = GlobalConstants.SEGMENT_ME, Replace_from__c = 'เครือข่ายลูกค้าผู้ประกอบการ 1');
            Chatter_Group_Name__c customSettingGroupSeName = new Chatter_Group_Name__c(Name = GlobalConstants.SEGMENT_SE, Replace_from__c = 'เครือข่ายลูกค้าผู้ประกอบการ 2');
            listCustomSettingGroupName.add(customSettingGroupMeName);
            listCustomSettingGroupName.add(customSettingGroupSeName);
            insert listCustomSettingGroupName;
            
            List<Chatter_Group_Email_Noti__c> listGroupEmailNoti = new List<Chatter_Group_Email_Noti__c>();
            Chatter_Group_Email_Noti__c ownerNotification = new Chatter_Group_Email_Noti__c(Name = 'Owner',NotificationFrequency__c = 'D');
            Chatter_Group_Email_Noti__c managerNotification = new Chatter_Group_Email_Noti__c(Name = 'Manager',NotificationFrequency__c = 'D');
            Chatter_Group_Email_Noti__c memberNotification = new Chatter_Group_Email_Noti__c(Name = 'Member',NotificationFrequency__c = 'D');
            listGroupEmailNoti.add(ownerNotification);
            listGroupEmailNoti.add(managerNotification);
            listGroupEmailNoti.add(memberNotification);
            insert listGroupEmailNoti;
        }
    }
    public static void setUpCustomSettingAdmin() {
        System.runAs(new User(Id=UserInfo.getUserId())){
            User userAdmin = [SELECT Id FROM User WHERE Firstname=:userFirstNameAdmin LIMIT 1][0];
            User userCBSAdmin = [SELECT Id From User WHERE Firstname=:userFirstNameCBSAdmin LIMIT 1][0];

            SME_ADMIN__c smeAdminC = SME_ADMIN__c.getInstance(UserInfo.getOrganizationId());
            if (smeAdminC != null) {
                smeAdminC.User_Record_ID__c = userAdmin.Id;
                insert smeAdminC;
            }
            User_Admin__c userAdminC = User_Admin__c.getInstance(UserInfo.getOrganizationId());
            if (userAdminC != null) {
                userAdminC.User_Record_ID__c = userAdmin.Id;
                userAdminC.Bad_User_ID__c = userAdmin.Id;
                userAdminC.SME_User_ID__c = userAdmin.Id;
                userAdminC.CBS_User_ID__c = userCBSAdmin.Id;
                userAdminC.RBS_User_ID__c = userAdmin.Id;
                insert userAdminC;
            }
            CBS_Admin_Ownership__c cbsAdminC = CBS_Admin_Ownership__c.getInstance(UserInfo.getOrganizationId());
            if (cbsAdminC != null) {
                cbsAdminC.User_Record_ID__c = userCBSAdmin.Id;
                insert cbsAdminC;
            }
        }
    }

    public Mockup_Test setUpTestWithRCCodeCBS() {
        Mockup_Test.setUpCustomSetting();
        
        System.runAs(new User(Id=UserInfo.getUserId())){
            setJobCodeFromProfile();
            Profile nhProfile = getMapProfileByName(GlobalConstants.SME_NH);
            Profile ahProfile = getMapProfileByName(GlobalConstants.SME_AH);
            Profile tmProfile = getMapProfileByName(GlobalConstants.SME_TM);
            Profile rmProfile = getMapProfileByName(GlobalConstants.SME_RM);
            Profile rmCBSProfile = getMapProfileByName(GlobalConstants.CBS_RM);
            Profile tmCBSProfile = getMapProfileByName(GlobalConstants.CBS_TM);
            Profile tlCBSProfile = getMapProfileByName(GlobalConstants.CBS_TL);

            UserRole adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_Admin'];
            UserRole nhRole = Mockup_Test.newRole(NH_RC_CODE, 'RC' + NH_RC_CODE, adminRole.Id);
            insert nhRole;
            UserRole ahRole = Mockup_Test.newRole(AH_RC_CODE, 'RC' + AH_RC_CODE, nhRole.Id);
            insert ahRole;
            UserRole tmRole = Mockup_Test.newRole(RC_CODE, 'RC' + RC_CODE, ahRole.Id);
            insert tmRole;
            UserRole rmRole = Mockup_Test.newRole(RC_CODE, 'RCRM' + RC_CODE, tmRole.Id);
            insert rmRole;
            UserRole tlRole = Mockup_Test.newRole(TL_CB_RC_CODE, 'RC' + TL_CB_RC_CODE, adminRole.Id);
            insert tlRole;
            List<UserRole>tlAndRmRole = new List<UserRole>();
            UserRole tmCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCTM' + CB_RC_CODE, tlRole.Id);
            tlAndRmRole.add(tmCBRole);
            UserRole rmCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBRM' + RC_CODE, tlRole.Id);
            tlAndRmRole.add(rmCBRole);
            insert tlAndRmRole;
            UserRole cbs_adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'CBS_Admin'];
            UserRole evpCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBEVP' + RC_CODE, null);
            insert evpCBRole;
            UserRole fsvpCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBFSVP' + RC_CODE, evpCBRole.Id);
            insert fsvpCBRole;
            UserRole kbankCBSCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBKBANKCBS' + RC_CODE, evpCBRole.Id);
            insert kbankCBSCBRole;
            UserRole cbsAdminCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBCBSADMIN' + RC_CODE, kbankCBSCBRole.Id);
            insert cbsAdminCBRole;
            List<UserRole>cbsTlAndRmRole = new List<UserRole>();
            UserRole tlCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBTL' + RC_CODE, cbs_adminRole.Id);
            cbsTlAndRmRole.add(tlCBRole);
            UserRole tmCB2Role = Mockup_Test.newRole(CB_RC_CODE, 'RCCBTM' + RC_CODE, tlRole.Id);
            cbsTlAndRmRole.add(tmCB2Role);
            UserRole rmCB2Role = Mockup_Test.newRole(CB_RC_CODE, 'RCCBRM2' + RC_CODE, tlRole.Id);
            cbsTlAndRmRole.add(rmCB2Role);
            insert cbsTlAndRmRole;

            UserRole smeuw = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_UW'];
            UserRole franchiseRole = Mockup_Test.newRole(FRANCHISE_NAME, FRANCHISE_DEVELOPER_NAME, smeuw.Id);
            insert franchiseRole;
            

            UserRole franchiseRole1 = [SELECT Id, Name, DeveloperName FROM UserRole WHERE Name =: FRANCHISE_NAME AND DeveloperName =: FRANCHISE_DEVELOPER_NAME ];

            Team_Structure__c tsNh = new Team_Structure__c(
                External_ID__c = NH_RC_CODE,
                RC_Code__c = NH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = null,
                Name = nhTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Network'
            );
            insert tsNh;

            Team_Structure__c tsAh = new Team_Structure__c(
                External_ID__c = AH_RC_CODE,
                RC_Code__c = AH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = null,
                NH_Name__c = tsNh.Id,
                Name = ahTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Area'
            );
            insert tsAh;

            List<Team_Structure__c> teamStructures = new List<Team_Structure__c>();
            Team_Structure__c tsTm = new Team_Structure__c(
                External_ID__c = RC_CODE,
                RC_Code__c = RC_CODE,
                AH_RC_Code__c = AH_RC_CODE,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = tsAh.Id,
                NH_Name__c = tsNh.Id,
                Name = tmTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Team'
            );
            teamStructures.add(tsTm);

            Team_Structure__c tsTl = new Team_Structure__c(
                External_ID__c = TL_CB_RC_CODE,
                RC_Code__c = TL_CB_RC_CODE,
                AH_RC_Code__c = TL_CB_RC_CODE,
                NH_RC_Code__c = null,
                AH_Name__c = null,
                NH_Name__c = null,
                Name = tlTeamName,
                Segment__c = 'CB',
                Type__c = 'Team'
            );
            teamStructures.add(tsTl);
            insert teamStructures;

            User nhUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameNH,
                    Mockup_Test.userLastNameNH,
                    true,
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH.substring(0, 4),
                    nhProfile.Id,
                    nhRole.Id,
                    null,
                    userEmpIdNH
            );
            nhUser.RC_Code__c = NH_RC_CODE;
            nhUser.NH_RC_Code__c = NH_RC_CODE;
            nhUser.Job_Code__c = 'ME1A';
            nhUser.Status__c = 'A';
            nhUser.Segment__c = teamSegment1;
            insert nhUser;

            User ahUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameAH,
                    Mockup_Test.userLastNameAH,
                    true,
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH.substring(0, 4),
                    ahProfile.Id,
                    ahRole.Id,
                    nhUser.Id,
                    userEmpIdAH
            );
            ahUser.RC_Code__c = AH_RC_CODE;
            ahUser.NH_RC_Code__c = NH_RC_CODE;
            ahUser.AH_RC_Code__c = AH_RC_CODE;
            ahUser.Job_Code__c = 'ME2A';
            ahUser.Status__c = 'A';
            ahUser.Segment__c = teamSegment1;
            insert ahUser;

            User tmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameTM,
                    Mockup_Test.userLastNameTM,
                    true,
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM.substring(0, 4),
                    tmProfile.Id,
                    tmRole.Id,
                    ahUser.Id,
                    userEmpIdTM
             );
            tmUser.Current_Opportunity_Approval__c = ahUser.Id;
            tmUser.Job_Code__c = 'ME3A';
            tmUser.AH_RC_Code__c = AH_RC_CODE;
            tmUser.NH_RC_Code__c = NH_RC_CODE;
            tmUser.RC_Code__c = RC_CODE;
            tmUser.Status__c = 'A';
            tmUser.Segment__c = teamSegment1;
            insert tmUser;            

            User rmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameRM,
                    Mockup_Test.userLastNameRM,
                    true,
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM.substring(0, 4),
                    rmProfile.Id,
                    rmRole.Id,
                    tmUser.Id,
                    userEmpIdRM
             );
            rmUser.Current_Opportunity_Approval__c = ahUser.Id;
            rmUser.Job_Code__c = 'ME4A';
            rmUser.AH_RC_Code__c = AH_RC_CODE;
            rmUser.NH_RC_Code__c = NH_RC_CODE;
            rmUser.RC_Code__c = RC_CODE;
            rmUser.Status__c = 'A';
            rmUser.Segment__c = teamSegment1;

            insert rmUser;
            
            User tlUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBTL,
                    Mockup_Test.userLastNameCBTL,
                    true,
                    userFirstNameCBTL+'@mail.com',
                    userFirstNameCBTL+'@mail.com',
                    userFirstNameCBTL.substring(0, 4),
                    tlCBSProfile.Id,
                    tlRole.Id,
                    null,
                    userCBSEmpIdTL
             );
            tlUser.Job_Code__c = 'ME3A';
            tlUser.AH_RC_Code__c = TL_CB_RC_CODE;
            tlUser.NH_RC_Code__c = '';
            tlUser.RC_Code__c = TL_CB_RC_CODE;
            tlUser.Status__c = 'A';
            tlUser.Segment__c = 'CB';
            insert tlUser;

            List<User> cbsTmAndRmUsers = new List<User>();

            User tmCBSUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBTM,
                    Mockup_Test.userLastNameCBTM,
                    true,
                    userFirstNameCBTM+'@mail.com',
                    userFirstNameCBTM+'@mail.com',
                    userFirstNameCBTM.substring(0, 4),
                    tmCBSProfile.Id,
                    tmCBRole.Id,
                    tlUser.Id,
                    userCBSEmpIdTM
             );
            tmCBSUser.Current_Opportunity_Approval__c = tlUser.Id;
            tmCBSUser.Job_Code__c = 'ME3A';
            tmCBSUser.AH_RC_Code__c = TL_CB_RC_CODE;
            tmCBSUser.RC_Code__c = TL_CB_RC_CODE;
            tmCBSUser.Status__c = 'A';
            tmCBSUser.Segment__c = 'CB';
            cbsTmAndRmUsers.add(tmCBSUser);

            User rmCBSUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBRM,
                    Mockup_Test.userLastNameCBRM,
                    true,
                    userFirstNameCBRM+'@mail.com',
                    userFirstNameCBRM+'@mail.com',
                    userFirstNameCBRM.substring(0, 4),
                    rmCBSProfile.Id,
                    rmCBRole.Id,
                    tlUser.Id,
                    userCBSEmpIdRM
             );
            rmCBSUser.Current_Opportunity_Approval__c = tlUser.Id;
            rmCBSUser.Job_Code__c = 'ME3A';
            rmCBSUser.AH_RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser.RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser.Status__c = 'A';
            rmCBSUser.Segment__c = 'CB';
            cbsTmAndRmUsers.add(rmCBSUser);
            User rmCBSUser2 = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBRM2,
                    Mockup_Test.userLastNameCBRM2,
                    true,
                    userFirstNameCBRM2+'@mail.com',
                    userFirstNameCBRM2+'@mail.com',
                    userFirstNameCBRM2.substring(0, 4),
                    rmCBSProfile.Id,
                    rmCBRole.Id,
                    tlUser.Id,
                    userCBSEmpIdRM2
             );
            rmCBSUser2.Current_Opportunity_Approval__c = tlUser.Id;
            rmCBSUser2.Job_Code__c = 'ME3A';
            rmCBSUser2.AH_RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser2.RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser2.Status__c = 'A';
            rmCBSUser2.Segment__c = 'CB';
            cbsTmAndRmUsers.add(rmCBSUser2);

            insert cbsTmAndRmUsers;
            Profile evpCBSProfile = getMapProfileByName(GlobalConstants.CBS_EVP);
            List<User> cbsUsers = new List<User>();
            User evpCBSUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBEVP,
                    Mockup_Test.userLastNameCBEVP,
                    true,
                    userFirstNameCBEVP+'@mail.com',
                    userFirstNameCBEVP+'@mail.com',
                    userFirstNameCBEVP.substring(0,4),
                    evpCBSProfile.Id,
                    evpCBRole.Id,
                    null,
                    userCBSEmpIdEVP
            );
            evpCBSUser.Segment__c = 'CB';
            cbsUsers.add(evpCBSUser);
            Profile fsvpCBSProfile = getMapProfileByName(GlobalConstants.CBS_FSVP);
            User fsvpCBUSer = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBFSVP,
                    Mockup_Test.userLastNameCBFSVP,
                    true,
                    userFirstNameCBFSVP+'@mail.com',
                    userFirstNameCBFSVP+'@mail.com',
                    userFirstNameCBFSVP.substring(0,4),
                    fsvpCBSProfile.Id,
                    fsvpCBRole.Id,
                    null,
                    TL_CB_RC_CODE      
            );
            fsvpCBUSer.Segment__c = 'CB';
            cbsUsers.add(fsvpCBUSer);
            User stlUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBSTL,
                    Mockup_Test.userLastNameCBSTL,
                    true,
                    Mockup_Test.userFirstNameCBSTL+'@mail.com',
                    Mockup_Test.userFirstNameCBSTL+'@mail.com',
                    Mockup_Test.userFirstNameCBSTL.substring(0, 4),
                    tlCBSProfile.Id,
                    tlRole.Id,
                    null,
                    userCBSEmpIdSTL
             );
            stlUser.Segment__c = 'CB';
            stlUser.RC_Code__c = 'STLRCCOde';
            cbsUsers.add(stlUser);
            insert cbsUsers;
            User subordinateOfStlUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBTLSubordinate,
                    Mockup_Test.userLastNameCBTLSubordinate,
                    true,
                    Mockup_Test.userFirstNameCBTLSubordinate+'@mail.com',
                    Mockup_Test.userFirstNameCBTLSubordinate+'@mail.com',
                    Mockup_Test.userFirstNameCBTLSubordinate.substring(0, 4),
                    tlCBSProfile.Id,
                    tlRole.Id,
                    null,
                    userCBSEmpIdTLsubOr
             );
            subordinateOfStlUser.Segment__c = 'CB';
            subordinateOfStlUser.managerId = stlUser.Id;
            subordinateOfStlUser.RC_Code__c = 'subStlRCCode';
            insert subordinateOfStlUser;

            User rmUserFranchise = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameFranchiseRM,
                    Mockup_Test.userLastNameFranchiseRM,
                    true,
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM.substring(0, 4),
                    rmProfile.Id,
                    franchiseRole.Id,
                    null,
                    userEmpIdFranchiseRM
             );
            rmUserFranchise.Current_Opportunity_Approval__c = null;
            rmUserFranchise.Job_Code__c = 'SP4E';
            rmUserFranchise.AH_RC_Code__c = null;
            rmUserFranchise.NH_RC_Code__c = null;
            rmUserFranchise.RC_Code__c = FRANCHISE_RC_CODE;
            rmUserFranchise.Status__c = 'A';
            rmUserFranchise.Segment__c = 'MI';

            insert rmUserFranchise;
            

            Pool_Visibility__c areaBKK1 = new Pool_Visibility__c();
            areaBKK1.Group_Indicate__c = 'Bangkok';
            areaBKK1.Name = 'RC' + Mockup_Test.NH_RC_CODE;
            areaBKK1.Role_Name__c = 'เครือข่ายลูกค้าผู้ประกอบการ 1 (กทม.1)';
            insert areaBKK1;
        }
        return this.setUpTestAdmin();
    }

    public Mockup_Test setUpTestWithRCCodeOnlySme() {
        Mockup_Test.setUpCustomSetting();
        
        System.runAs(new User(Id=UserInfo.getUserId())){
            setJobCodeFromProfile();
            Profile nhProfile = getMapProfileByName(GlobalConstants.SME_NH);
            Profile ahProfile = getMapProfileByName(GlobalConstants.SME_AH);
            Profile tmProfile = getMapProfileByName(GlobalConstants.SME_TM);
            Profile rmProfile = getMapProfileByName(GlobalConstants.SME_RM);
            Profile rmCBSProfile = getMapProfileByName(GlobalConstants.CBS_RM);
            Profile tmCBSProfile = getMapProfileByName(GlobalConstants.CBS_TM);
            Profile tlCBSProfile = getMapProfileByName(GlobalConstants.CBS_TL);

            UserRole adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_Admin'];
            UserRole nhRole = Mockup_Test.newRole(NH_RC_CODE, 'RC' + NH_RC_CODE, adminRole.Id);
            insert nhRole;
            UserRole ahRole = Mockup_Test.newRole(AH_RC_CODE, 'RC' + AH_RC_CODE, nhRole.Id);
            insert ahRole;
            UserRole tmRole = Mockup_Test.newRole(RC_CODE, 'RC' + RC_CODE, ahRole.Id);
            insert tmRole;
            UserRole rmRole = Mockup_Test.newRole(RC_CODE, 'RCRM' + RC_CODE, tmRole.Id);
            insert rmRole;

            UserRole smeuw = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_UW'];
            UserRole franchiseRole = Mockup_Test.newRole(FRANCHISE_NAME, FRANCHISE_DEVELOPER_NAME, smeuw.Id);
            insert franchiseRole;
            

            UserRole franchiseRole1 = [SELECT Id, Name, DeveloperName FROM UserRole WHERE Name =: FRANCHISE_NAME AND DeveloperName =: FRANCHISE_DEVELOPER_NAME ];

            Team_Structure__c tsNh = new Team_Structure__c(
                External_ID__c = NH_RC_CODE,
                RC_Code__c = NH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = null,
                Name = nhTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Network'
            );
            insert tsNh;

            Team_Structure__c tsAh = new Team_Structure__c(
                External_ID__c = AH_RC_CODE,
                RC_Code__c = AH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = null,
                NH_Name__c = tsNh.Id,
                Name = ahTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Area'
            );
            insert tsAh;

            Team_Structure__c tsTm = new Team_Structure__c(
                External_ID__c = RC_CODE,
                RC_Code__c = RC_CODE,
                AH_RC_Code__c = AH_RC_CODE,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = tsAh.Id,
                NH_Name__c = tsNh.Id,
                Name = tmTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Team'
            );
            insert tsTm;

            User nhUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameNH,
                    Mockup_Test.userLastNameNH,
                    true,
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH.substring(0, 4),
                    nhProfile.Id,
                    nhRole.Id,
                    null,
                    userEmpIdNH
            );
            nhUser.RC_Code__c = NH_RC_CODE;
            nhUser.NH_RC_Code__c = NH_RC_CODE;
            nhUser.Job_Code__c = 'ME1A';
            nhUser.Status__c = 'A';
            nhUser.Segment__c = teamSegment1;
            insert nhUser;

            User ahUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameAH,
                    Mockup_Test.userLastNameAH,
                    true,
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH.substring(0, 4),
                    ahProfile.Id,
                    ahRole.Id,
                    nhUser.Id,
                    userEmpIdAH
            );
            ahUser.RC_Code__c = AH_RC_CODE;
            ahUser.NH_RC_Code__c = NH_RC_CODE;
            ahUser.AH_RC_Code__c = AH_RC_CODE;
            ahUser.Job_Code__c = 'ME2A';
            ahUser.Status__c = 'A';
            ahUser.Segment__c = teamSegment1;
            insert ahUser;

            User tmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameTM,
                    Mockup_Test.userLastNameTM,
                    true,
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM.substring(0, 4),
                    tmProfile.Id,
                    tmRole.Id,
                    ahUser.Id,
                    userEmpIdTM
             );
            tmUser.Current_Opportunity_Approval__c = ahUser.Id;
            tmUser.Job_Code__c = 'ME3A';
            tmUser.AH_RC_Code__c = AH_RC_CODE;
            tmUser.NH_RC_Code__c = NH_RC_CODE;
            tmUser.RC_Code__c = RC_CODE;
            tmUser.Status__c = 'A';
            tmUser.Segment__c = teamSegment1;
            insert tmUser;            

            User rmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameRM,
                    Mockup_Test.userLastNameRM,
                    true,
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM.substring(0, 4),
                    rmProfile.Id,
                    rmRole.Id,
                    tmUser.Id,
                    userEmpIdRM
             );
            rmUser.Current_Opportunity_Approval__c = ahUser.Id;
            rmUser.Job_Code__c = 'ME4A';
            rmUser.AH_RC_Code__c = AH_RC_CODE;
            rmUser.NH_RC_Code__c = NH_RC_CODE;
            rmUser.RC_Code__c = RC_CODE;
            rmUser.Status__c = 'A';
            rmUser.Segment__c = teamSegment1;

            insert rmUser;
            
            User rmUserFranchise = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameFranchiseRM,
                    Mockup_Test.userLastNameFranchiseRM,
                    true,
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM.substring(0, 4),
                    rmProfile.Id,
                    franchiseRole.Id,
                    null,
                    userEmpIdFranchiseRM
             );
            rmUserFranchise.Current_Opportunity_Approval__c = null;
            rmUserFranchise.Job_Code__c = 'SP4E';
            rmUserFranchise.AH_RC_Code__c = null;
            rmUserFranchise.NH_RC_Code__c = null;
            rmUserFranchise.RC_Code__c = FRANCHISE_RC_CODE;
            rmUserFranchise.Status__c = 'A';
            rmUserFranchise.Segment__c = 'MI';

            insert rmUserFranchise;
            

            Pool_Visibility__c areaBKK1 = new Pool_Visibility__c();
            areaBKK1.Group_Indicate__c = 'Bangkok';
            areaBKK1.Name = 'RC' + Mockup_Test.NH_RC_CODE;
            areaBKK1.Role_Name__c = 'เครือข่ายลูกค้าผู้ประกอบการ 1 (กทม.1)';
            insert areaBKK1;
        }
        return this.setUpTestAdmin();
    }
    
    public Mockup_Test setUpTestWithRCCode() {
        Mockup_Test.setUpCustomSetting();
        System.runAs(new User(Id=UserInfo.getUserId())){
            setJobCodeFromProfile();
            Profile nhProfile = getMapProfileByName(GlobalConstants.SME_NH);
            Profile ahProfile = getMapProfileByName(GlobalConstants.SME_AH);
            Profile tmProfile = getMapProfileByName(GlobalConstants.SME_TM);
            Profile rmProfile = getMapProfileByName(GlobalConstants.SME_RM);
            Profile rmCBSProfile = getMapProfileByName(GlobalConstants.CBS_RM);
            Profile tmCBSProfile = getMapProfileByName(GlobalConstants.CBS_TM);
            Profile tlCBSProfile = getMapProfileByName(GlobalConstants.CBS_TL);

            UserRole adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_Admin'];
            UserRole nhRole = Mockup_Test.newRole(NH_RC_CODE, 'RC' + NH_RC_CODE, adminRole.Id);
            insert nhRole;
            UserRole ahRole = Mockup_Test.newRole(AH_RC_CODE, 'RC' + AH_RC_CODE, nhRole.Id);
            insert ahRole;
            UserRole tmRole = Mockup_Test.newRole(RC_CODE, 'RC' + RC_CODE, ahRole.Id);
            insert tmRole;
            UserRole rmRole = Mockup_Test.newRole(RC_CODE, 'RCRM' + RC_CODE, tmRole.Id);
            insert rmRole;
            UserRole tlRole = Mockup_Test.newRole(TL_CB_RC_CODE, 'RC' + TL_CB_RC_CODE, adminRole.Id);
            insert tlRole;
            UserRole tmCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCTM' + CB_RC_CODE, tlRole.Id);
            insert tmCBRole;
            UserRole rmCBRole = Mockup_Test.newRole(CB_RC_CODE, 'RCCBRM' + RC_CODE, tlRole.Id);
            insert rmCBRole;

            UserRole smeuw = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_UW'];
            UserRole franchiseRole = Mockup_Test.newRole(FRANCHISE_NAME, FRANCHISE_DEVELOPER_NAME, smeuw.Id);
            insert franchiseRole;

            UserRole franchiseRole1 = [SELECT Id, Name, DeveloperName FROM UserRole WHERE Name =: FRANCHISE_NAME AND DeveloperName =: FRANCHISE_DEVELOPER_NAME ];

            Team_Structure__c tsNh = new Team_Structure__c(
                External_ID__c = NH_RC_CODE,
                RC_Code__c = NH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = null,
                Name = nhTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Network',
                Province__c = 'Bangkok'
            );
            insert tsNh;

            Team_Structure__c tsAh = new Team_Structure__c(
                External_ID__c = AH_RC_CODE,
                RC_Code__c = AH_RC_CODE,
                AH_RC_Code__c = null,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = null,
                NH_Name__c = tsNh.Id,
                Name = ahTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Area',
                Province__c = 'Bangkok'
            );
            insert tsAh;

            Team_Structure__c tsTm = new Team_Structure__c(
                External_ID__c = RC_CODE,
                RC_Code__c = RC_CODE,
                AH_RC_Code__c = AH_RC_CODE,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = tsAh.Id,
                NH_Name__c = tsNh.Id,
                Name = tmTeamName,
                Segment__c = teamSegment1,
                Type__c = 'Team',
                Province__c = 'Bangkok'
            );
            insert tsTm;

            Team_Structure__c tsTl = new Team_Structure__c(
                External_ID__c = TL_CB_RC_CODE,
                RC_Code__c = TL_CB_RC_CODE,
                AH_RC_Code__c = TL_CB_RC_CODE,
                NH_RC_Code__c = null,
                AH_Name__c = null,
                NH_Name__c = null,
                Name = tlTeamName,
                Segment__c = 'CB',
                Type__c = 'Team',
                Province__c = 'Phuket'
            );
            insert tsTl;

            User nhUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameNH,
                    Mockup_Test.userLastNameNH,
                    true,
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH.substring(0, 4),
                    nhProfile.Id,
                    nhRole.Id,
                    null,
                    userEmpIdNH
            );
            nhUser.RC_Code__c = NH_RC_CODE;
            nhUser.NH_RC_Code__c = NH_RC_CODE;
            nhUser.Job_Code__c = 'ME1A';
            nhUser.Status__c = 'A';
            nhUser.Segment__c = teamSegment1;
            insert nhUser;

            User ahUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameAH,
                    Mockup_Test.userLastNameAH,
                    true,
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH+'@mail.com',
                    userFirstNameAH.substring(0, 4),
                    ahProfile.Id,
                    ahRole.Id,
                    nhUser.Id,
                    userEmpIdAH
            );
            ahUser.RC_Code__c = AH_RC_CODE;
            ahUser.NH_RC_Code__c = NH_RC_CODE;
            ahUser.AH_RC_Code__c = AH_RC_CODE;
            ahUser.Job_Code__c = 'ME2A';
            ahUser.Status__c = 'A';
            ahUser.Segment__c = teamSegment1;
            insert ahUser;

            User tmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameTM,
                    Mockup_Test.userLastNameTM,
                    true,
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM+'@mail.com',
                    userFirstNameTM.substring(0, 4),
                    tmProfile.Id,
                    tmRole.Id,
                    ahUser.Id,
                    userEmpIdTM
             );
            tmUser.Current_Opportunity_Approval__c = ahUser.Id;
            tmUser.Job_Code__c = 'ME3A';
            tmUser.AH_RC_Code__c = AH_RC_CODE;
            tmUser.NH_RC_Code__c = NH_RC_CODE;
            tmUser.RC_Code__c = RC_CODE;
            tmUser.Status__c = 'A';
            tmUser.Segment__c = teamSegment1;
            insert tmUser;            

            User rmUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameRM,
                    Mockup_Test.userLastNameRM,
                    true,
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM+'@mail.com',
                    userFirstNameRM.substring(0, 4),
                    rmProfile.Id,
                    rmRole.Id,
                    tmUser.Id,
                    userEmpIdRM
             );
            rmUser.Current_Opportunity_Approval__c = ahUser.Id;
            rmUser.Job_Code__c = 'ME4A';
            rmUser.AH_RC_Code__c = AH_RC_CODE;
            rmUser.NH_RC_Code__c = NH_RC_CODE;
            rmUser.RC_Code__c = RC_CODE;
            rmUser.Status__c = 'A';
            rmUser.Segment__c = teamSegment1;

            insert rmUser;
            
            User tlUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBTL,
                    Mockup_Test.userLastNameCBTL,
                    true,
                    userFirstNameCBTL+'@mail.com',
                    userFirstNameCBTL+'@mail.com',
                    userFirstNameCBTL.substring(0, 4),
                    tlCBSProfile.Id,
                    tlRole.Id,
                    null,
                    userCBSEmpIdTL
             );
            tlUser.Job_Code__c = 'ME3A';
            tlUser.AH_RC_Code__c = TL_CB_RC_CODE;
            tlUser.NH_RC_Code__c = '';
            tlUser.RC_Code__c = TL_CB_RC_CODE;
            tlUser.Status__c = 'A';
            tlUser.Segment__c = 'CB';
            insert tlUser;

            User tmCBSUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBTM,
                    Mockup_Test.userLastNameCBTM,
                    true,
                    userFirstNameCBTM+'@mail.com',
                    userFirstNameCBTM+'@mail.com',
                    userFirstNameCBTM.substring(0, 4),
                    tmCBSProfile.Id,
                    tmCBRole.Id,
                    tlUser.Id,
                    userCBSEmpIdTM
             );
            tmCBSUser.Current_Opportunity_Approval__c = tlUser.Id;
            tmCBSUser.Job_Code__c = 'ME3A';
            tmCBSUser.AH_RC_Code__c = TL_CB_RC_CODE;
            tmCBSUser.RC_Code__c = TL_CB_RC_CODE;
            tmCBSUser.Status__c = 'A';
            tmCBSUser.Segment__c = 'CB';
            insert tmCBSUser;


            User rmCBSUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameCBRM,
                    Mockup_Test.userLastNameCBRM,
                    true,
                    userFirstNameCBRM+'@mail.com',
                    userFirstNameCBRM+'@mail.com',
                    userFirstNameCBRM.substring(0, 4),
                    rmCBSProfile.Id,
                    rmCBRole.Id,
                    tlUser.Id,
                    userCBSEmpIdRM
             );
            rmCBSUser.Current_Opportunity_Approval__c = tlUser.Id;
            rmCBSUser.Job_Code__c = 'ME3A';
            rmCBSUser.AH_RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser.RC_Code__c = TL_CB_RC_CODE;
            rmCBSUser.Status__c = 'A';
            rmCBSUser.Segment__c = 'CB';
            insert rmCBSUser;

            User rmUserFranchise = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameFranchiseRM,
                    Mockup_Test.userLastNameFranchiseRM,
                    true,
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM+'@mail.com',
                    userFirstNameFranchiseRM.substring(0, 4),
                    rmProfile.Id,
                    franchiseRole.Id,
                    null,
                    userEmpIdFranchiseRM
             );
            rmUserFranchise.Current_Opportunity_Approval__c = null;
            rmUserFranchise.Job_Code__c = 'SP4E';
            rmUserFranchise.AH_RC_Code__c = null;
            rmUserFranchise.NH_RC_Code__c = null;
            rmUserFranchise.RC_Code__c = FRANCHISE_RC_CODE;
            rmUserFranchise.Status__c = 'A';
            rmUserFranchise.Segment__c = 'MI';

            insert rmUserFranchise;
            

            Pool_Visibility__c areaBKK1 = new Pool_Visibility__c();
            areaBKK1.Group_Indicate__c = 'Bangkok';
            areaBKK1.Name = 'RC' + Mockup_Test.NH_RC_CODE;
            areaBKK1.Role_Name__c = 'เครือข่ายลูกค้าผู้ประกอบการ 1 (กทม.1)';
            insert areaBKK1;
        }
        return this.setUpTestAdmin();
    }

    public static void setupANTeam(){
        System.runAs(new User(Id=UserInfo.getUserId())){

            List<Profile> listProfile = new List<Profile>();
            listProfile = [SELECT Id,Name FROM Profile];
            
            UserRole anRole = [SELECT Id, Name, DeveloperName FROM UserRole WHERE Name =: GlobalConstants.AN_TEAM_NAME];

            Profile nhANProfile = getMapProfileByName(GlobalConstants.AN_NH);
            Profile ahANProfile = getMapProfileByName(GlobalConstants.AN_AH);
            Profile tmANProfile = getMapProfileByName(GlobalConstants.AN_TM);
            Profile rmANProfile = getMapProfileByName(GlobalConstants.AN_RM);

            Team_Structure__c tsNhAN = new Team_Structure__c(
                External_ID__c = nhANRCCode,
                RC_Code__c = nhANRCCode,
                AH_RC_Code__c = null,
                NH_RC_Code__c = null,
                Name = nhANTeamName,
                Segment__c = teamSegment,
                Type__c = 'Network'
            );
            insert tsNhAN;

            Team_Structure__c tsAhAN = new Team_Structure__c(
                External_ID__c = ahANRCCode,
                RC_Code__c = ahANRCCode,
                AH_RC_Code__c = null,
                NH_RC_Code__c = nhANRCCode,
                AH_Name__c = null,
                NH_Name__c = tsNhAN.Id,
                Name = ahANTeamName,
                Segment__c = teamSegment,
                Type__c = 'Area'
            );
            insert tsAhAN;

            Team_Structure__c tsTmAN = new Team_Structure__c(
                External_ID__c = tmANRCCode,
                RC_Code__c = tmANRCCode,
                AH_RC_Code__c = ahANRCCode,
                NH_RC_Code__c = nhANRCCode,
                AH_Name__c = tsAhAN.Id,
                NH_Name__c = tsNhAN.Id,
                Name = tmANTeamName,
                Segment__c = teamSegment,
                Type__c = 'Team'
            );
            insert tsTmAN;

            User nhANUser = Mockup_Test.newUser(
                    nhANUserFirstName,
                    nhANUserLastName,
                    true,
                    nhANUserFirstName+'@mail.com',
                    nhANUserFirstName+'@mail.com',
                    nhANUserFirstName.substring(0, 4),
                    nhANProfile.Id,
                    anRole.Id,
                    null,
                    nhANEmpId
            );
            nhANUser.RC_Code__c = nhANRCCode;
            nhANUser.NH_RC_Code__c = nhANRCCode;
            nhANUser.Job_Code__c = 'AN1A';
            nhANUser.Status__c = 'A';
            nhANUser.Segment__c = teamSegment;
            insert nhANUser;

            User ahANUser = Mockup_Test.newUser(
                    ahANUserFirstName,
                    ahANUserLastName,
                    true,
                    ahANUserFirstName+'@mail.com',
                    ahANUserFirstName+'@mail.com',
                    ahANUserFirstName.substring(0, 4),
                    ahANProfile.Id,
                    anRole.Id,
                    nhANUser.Id,
                    ahANEmpId
            );
            ahANUser.RC_Code__c = ahANRCCode;
            ahANUser.NH_RC_Code__c = nhANRCCode;
            ahANUser.AH_RC_Code__c = ahANRCCode;
            ahANUser.Job_Code__c = 'AN2A';
            ahANUser.Status__c = 'A';
            ahANUser.Segment__c = teamSegment;
            insert ahANUser;

            User tmANUser = Mockup_Test.newUser(
                    tmANUserFirstName,
                    tmANUserLastName,
                    true,
                    tmANUserFirstName+'@mail.com',
                    tmANUserFirstName+'@mail.com',
                    tmANUserFirstName.substring(0, 4),
                    tmANProfile.Id,
                    anRole.Id,
                    ahANUser.Id,
                    tmANEmpId
             );
            tmANUser.Current_Opportunity_Approval__c = ahANUser.Id;
            tmANUser.Job_Code__c = 'AN3A';
            tmANUser.AH_RC_Code__c = ahANRCCode;
            tmANUser.NH_RC_Code__c = nhANRCCode;
            tmANUser.RC_Code__c = tmANRCCode;
            tmANUser.Status__c = 'A';
            tmANUser.Segment__c = teamSegment;
            insert tmANUser;            

            User rmANUser = Mockup_Test.newUser(
                    rmANUserFirstName,
                    tmANUserLastName,
                    true,
                    rmANUserFirstName+'@mail.com',
                    rmANUserFirstName+'@mail.com',
                    rmANUserFirstName.substring(0, 4),
                    rmANProfile.Id,
                    anRole.Id,
                    tmANUser.Id,
                    rmANEmpId
             );
            rmANUser.Current_Opportunity_Approval__c = ahANUser.Id;
            rmANUser.Job_Code__c = 'AN4A';
            rmANUser.AH_RC_Code__c = ahANRCCode;
            rmANUser.NH_RC_Code__c = nhANRCCode;
            rmANUser.RC_Code__c = tmANRCCode;
            rmANUser.Status__c = 'A';
            rmANUser.Segment__c = teamSegment;

            insert rmANUser;
        }
    }

    public static void setupANAccountShare(String accountName){
        System.runAs(new User(Id=UserInfo.getUserId())){
            List<Account> accountList = getAllAccountFromName(accountName,'Id');
            List<User> userANList = [SELECT Id, IsActive FROM User WHERE UserRole.Name =: GlobalConstants.AN_TEAM_NAME];
            List<AccountShare> accountShareList = new List<AccountShare>();
            for(Account eachAccount : accountList){
                for(User eachUser : userANList){
                    AccountShare accountShare = new AccountShare(
                        AccountAccessLevel = 'Edit',
                        OpportunityAccessLevel = 'Read',
                        UserOrGroupId = eachUser.Id,
                        AccountId = eachAccount.Id
                        );
                    if(eachUser.IsActive){
                        accountShareList.add(accountShare);
                    }
                }
            }
            insert accountShareList;
        }
    }

    public Mockup_Test setUpTest() {
        Mockup_Test.setUpCustomSetting();

        System.runAs(new User(Id=UserInfo.getUserId())){

            UserRole ahRole = new UserRole(Name='AreaAh',DeveloperName=Mockup_Test.ahRoleDeveloperName);
            insert ahRole;

            User ahUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameAh,
                Mockup_Test.userLastNameAh,
                true,
                'FirstNameAh@mail.com',
                'FirstNameAh@mail.com',
                'ahUser',
                getMapProfileByName(GlobalConstants.SME_AH).Id,
                ahRole.Id,
                null,
                userEmpIdAH
            );
            insert ahUser;

            UserRole tmRole = new UserRole(Name='AreaTm',DeveloperName=Mockup_Test.tmRoleDeveloperName,ParentRoleId=ahRole.Id);
            insert tmRole;

            User tmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameTM,
                Mockup_Test.userLastNameTM,
                true,
                'FirstNameTM@mail.com',
                'FirstNameTM@mail.com',
                'tmUser',
                getMapProfileByName(GlobalConstants.SME_TM).Id,
                tmRole.Id,
                ahUser.Id,
                userEmpIdTM
            );
            insert tmUser;

            User rbsTmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameRBSTM,
                Mockup_Test.userLastNameTM,
                true,
                'rbsFirstNameTM@mail.com',
                'rbsFirstNameTM@mail.com',
                'rbTmUser',
                getMapProfileByName(GlobalConstants.RBS_TM).Id,
                tmRole.Id,
                ahUser.Id,
                userEmpIdRMRBS
            );
            insert rbsTmUser;

            
            
            UserRole rmRole = new UserRole(Name='AreaRm',DeveloperName=Mockup_Test.rmRoleDeveloperName,ParentRoleId=tmRole.Id);
            insert rmRole;

            User rmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameRM,
                Mockup_Test.userLastNameRM,
                true,
                'FirstNameRM@mail.com',
                'FirstNameRM@mail.com',
                'rmUser',
                getMapProfileByName(GlobalConstants.SME_RM).Id,
                rmRole.Id,
                tmUser.Id,
                userEmpIdRM
            );
            insert rmUser;

            /*--------------11/10/2016 Create By Taranyoo.B-----------------*/
            UserRole tlCBSRole = new UserRole(Name='AreaTlCBS',DeveloperName=Mockup_Test.tlCBSRoleDeveloperName);
            insert tlCBSRole;

            User tlCBSUser = Mockup_Test.newUser(
                Mockup_Test.userCBSFirstNameTL,
                Mockup_Test.userCBSLastNameTL,
                true,
                'FirstNameTlCBS@mail.com',
                'FirstNameTlCBS@mail.com',
                'tlCBSUs',
                getMapProfileByName(GlobalConstants.CBS_TL).Id,
                tlCBSRole.Id,
                null,
                userCBSEmpIdTL
            );
            insert tlCBSUser;

            UserRole tmCBSRole = new UserRole(Name='AreaTmCBS',DeveloperName=Mockup_Test.tmCBSRoleDeveloperName,ParentRoleId=tlCBSRole.Id);
            insert tmCBSRole;

            User tmCBSUser = Mockup_Test.newUser(
                Mockup_Test.userCBSFirstNameTM,
                Mockup_Test.userCBSLastNameTM,
                true,
                'FirstNameTmCBS@mail.com',
                'FirstNameTmCBS@mail.com',
                'tmCBSU',
                getMapProfileByName(GlobalConstants.CBS_TM).Id,
                tmCBSRole.Id,
                tlCBSUser.Id,
                userCBSEmpIdTM
            );
            insert tmCBSUser;
            
            UserRole rmCBSRole = new UserRole(Name='AreaRmCBS',DeveloperName=Mockup_Test.rmCBSRoleDeveloperName,ParentRoleId=tmCBSRole.Id);
            insert rmCBSRole;

            User rmCBSUser = Mockup_Test.newUser(
                Mockup_Test.userCBSFirstNameRM,
                Mockup_Test.userCBSLastNameRM,
                true,
                'FirstNameRmCBS@mail.com',
                'FirstNameRmCBS@mail.com',
                'rmCBSU',
                getMapProfileByName(GlobalConstants.CBS_RM).Id,
                rmCBSRole.Id,
                tmCBSUser.Id,
                userCBSEmpIdRM
            );
            insert rmCBSUser;

            User rmCBSUser2 = Mockup_Test.newUser(
                Mockup_Test.userCBSFirstNameRM2,
                Mockup_Test.userCBSLastNameRM2,
                true,
                'FirstNameRm2CBS@mail.com',
                'FirstNameRm2CBS@mail.com',
                'rmCBSU',
                getMapProfileByName(GlobalConstants.CBS_RM).Id,
                rmCBSRole.Id,
                tmCBSUser.Id,
                userCBSEmpIdRM2
            );
            insert rmCBSUser2;

        }
        return this.setUpTestAdmin();
    }
    public Mockup_Test setUpTestWithExtension(){
        TriggerHandler.bypass('UserTriggerHandler');
        Mockup_Test.setUpCustomSetting();
        
        Id nhProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_NH LIMIT 1].Id;
        Id ahProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_AH LIMIT 1].Id;
        Id tmProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_TM LIMIT 1].Id;
        Id rmProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_RM LIMIT 1].Id;
        Id adminProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_ADMIN LIMIT 1].Id;

        System.runAs(new User(Id=UserInfo.getUserId())){
            UserRole adminRole = [SELECT Id FROM UserRole WHERE DeveloperName = 'SME_Admin'];
            UserRole nhRole = new UserRole(Name='AreaNh',DeveloperName=Mockup_Test.nhRoleDeveloperName,ParentRoleId=adminRole.Id);
            User nhUser = Mockup_Test.newUser(
                    Mockup_Test.userFirstNameNH,
                    Mockup_Test.userLastNameNH,
                    true,
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH+'@mail.com',
                    userFirstNameNH.substring(0, 4),
                    nhProfileId,
                    nhRole.Id,
                    null,
                    userEmpIdNH
            );
            nhUser.RC_Code__c = NH_RC_CODE;
            nhUser.Job_Code__c = 'ME1A';
            nhUser.Status__c = 'A';
            insert nhUser;

            Team_Structure__c tsNh = new Team_Structure__c(
                AH_Name__c = null,
                OwnerId = nhUser.Id,
                RC_Code__c = NH_RC_CODE,
                Name = nhUser.Name,
                External_ID__c = nhUser.RC_Code__c
            );
            insert tsNh;

            UserRole ahRole = new UserRole(Name='AreaAh',DeveloperName=Mockup_Test.ahRoleDeveloperName,ParentRoleId=nhRole.Id);
            insert ahRole;

            User ahUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameAh,
                Mockup_Test.userLastNameAh,
                true,
                'FirstNameAh@mail.com',
                'FirstNameAh@mail.com',
                'ahUser',
                ahProfileId,
                ahRole.Id,
                nhUser.Id,
                userEmpIdAH
            );
            ahUser.RC_Code__c = AH_RC_CODE;
            ahUser.NH_RC_Code__c = NH_RC_CODE;
            ahUser.AH_RC_Code__c = AH_RC_CODE;
            ahUser.Job_Code__c = 'ME2A';
            insert ahUser;

            Team_Structure__c tsAh = new Team_Structure__c(
                NH_Name__c = tsNh.Id,
                NH_RC_Code__c = NH_RC_CODE,
                RC_Code__c = AH_RC_CODE,
                AH_Name__c = null,
                OwnerId = ahUser.Id,
                Name = ahUser.Name,
                External_ID__c = ahUser.RC_Code__c
            );
            insert tsAh;

            UserRole tmRole = new UserRole(Name='AreaTm',DeveloperName=Mockup_Test.tmRoleDeveloperName,ParentRoleId=ahRole.Id);
            insert tmRole;

            User tmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameTM,
                Mockup_Test.userLastNameTM,
                true,
                'FirstNameTM@mail.com',
                'FirstNameTM@mail.com',
                'tmUser',
                tmProfileId,
                tmRole.Id,
                ahUser.Id,
                userEmpIdTM
            );
            tmUser.Job_Code__c = 'ME3A';
            tmUser.AH_RC_Code__c = AH_RC_CODE;
            tmUser.NH_RC_Code__c = NH_RC_CODE;
            tmUser.RC_Code__c = RC_CODE;
            insert tmUser;
    
            UserRole rmRole = new UserRole(Name='AreaRm',DeveloperName=Mockup_Test.rmRoleDeveloperName,ParentRoleId=tmRole.Id);
            insert rmRole;

            User rmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameRM,
                Mockup_Test.userLastNameRM,
                true,
                'FirstNameRM@mail.com',
                'FirstNameRM@mail.com',
                'rmUser',
                rmProfileId,
                rmRole.Id,
                tmUser.Id,
                userEmpIdRM
            );
            rmUser.Job_Code__c = 'ME4A';
            rmUser.AH_RC_Code__c = AH_RC_CODE;
            rmUser.NH_RC_Code__c = NH_RC_CODE;
            rmUser.RC_Code__c = RC_CODE;
            rmUser.Status__c = 'A';
            insert rmUser;

            User rm2 = Mockup_Test.newUser(
                Mockup_Test.userFirstNameRM2,
                Mockup_Test.userLastNameRM2,
                true,
                'FirstNameRM2@mail.com',
                'FirstNameRM@mail.com',
                'rm2',
                rmProfileId,
                rmRole.Id,
                tmUser.Id,
                userEmpIdRM2
            );
            rmUser.Job_Code__c = 'ME4A';
            rmUser.AH_RC_Code__c = AH_RC_CODE;
            rmUser.NH_RC_Code__c = NH_RC_CODE;
            rmUser.RC_Code__c = RC_CODE;
            rmUser.Status__c = 'A';
            insert rm2;

            Team_Structure__c tsTm = new Team_Structure__c(
                NH_Name__c = tsNh.Id,
                NH_RC_Code__c = NH_RC_CODE,
                AH_Name__c = tsAh.Id,
                AH_RC_Code__c = AH_RC_CODE,
                OwnerId = rmUser.Id,
                RC_Code__c = RC_CODE,
                Name = tmUser.Name,
                External_ID__c = tmUser.RC_Code__c
            );
            insert tsTm;

            List<User_Extension__c> insertExtensionList = new List<User_Extension__c>();

            User_Extension__c nhExt = new User_Extension__c(
                User__c = nhUser.Id,
                OwnerId = nhUser.Id,
                Team_Structure__c = tsNh.Id,
                External_ID__c = nhUser.Employee_ID__c
            );
            insertExtensionList.add(nhExt);

            User_Extension__c ahExt = new User_Extension__c(
                User__c = ahUser.Id,
                OwnerId = ahUser.Id,
                Team_Structure__c = tsAh.Id,
                External_ID__c = ahUser.Employee_ID__c
            );
            insertExtensionList.add(ahExt);
            
            User_Extension__c tmExt = new User_Extension__c(
                User__c=tmUser.Id,
                OwnerId = tmUser.Id,
                Team_Structure__c = tsTm.Id,
                External_ID__c = tmUser.Employee_ID__c
            );
            insertExtensionList.add(tmExt);

            User_Extension__c rmExt = new User_Extension__c(
                User__c = rmUser.Id,
                OwnerId = rmUser.Id,
                Team_Structure__c = tsTm.Id,
                External_ID__c = rmUser.Employee_ID__c
            );
            insertExtensionList.add(rmExt);

            User_Extension__c rmExt2 = new User_Extension__c(
                User__c = rm2.Id,
                OwnerId = rm2.Id,
                Team_Structure__c = tsTm.Id,
                External_ID__c = rm2.Employee_ID__c
            );
            insertExtensionList.add(rmExt2);

            if(insertExtensionList.size() > 0) insert insertExtensionList;
        }
        return this;
    }
    public Mockup_Test setUpTestDifferentArea() {
        
        Id ahProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_AH LIMIT 1].Id;
        Id tmProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_TM LIMIT 1].Id;
        Id rmProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_RM LIMIT 1].Id;
        Id adminProfileId = [SELECT Id FROM Profile WHERE Name = :GlobalConstants.SME_ADMIN LIMIT 1].Id;

        System.runAs(new User(Id=UserInfo.getUserId())){

            UserRole ahRole = new UserRole(Name='AreaAhDiff',DeveloperName=Mockup_Test.ahRoleDeveloperNameDiff);
            insert ahRole;

            User ahUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameAhDiff,
                Mockup_Test.userLastNameAhDiff,
                true,
                'FirstNameAhDiff@mail.com',
                'FirstNameAhDiff@mail.com',
                'ahUser',
                ahProfileId,
                ahRole.Id,
                null,
                userEmpIdAHDiff
            );
            insert ahUser;

            UserRole tmRole = new UserRole(Name='AreaTmDiff',DeveloperName=Mockup_Test.tmRoleDeveloperNameDiff,ParentRoleId=ahRole.Id);
            insert tmRole;

            User tmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameTMDiff,
                Mockup_Test.userLastNameTMDiff,
                true,
                'FirstNameTMDiff@mail.com',
                'FirstNameTMDiff@mail.com',
                'tmUser',
                tmProfileId,
                tmRole.Id,
                ahUser.Id,
                userEmpIdTMDiff
            );
            insert tmUser;
            
            UserRole rmRole = new UserRole(Name='AreaRmDiff',DeveloperName=Mockup_Test.rmRoleDeveloperNameDiff,ParentRoleId=tmRole.Id);
            insert rmRole;

            User rmUser = Mockup_Test.newUser(
                Mockup_Test.userFirstNameRMDiff,
                Mockup_Test.userLastNameRMDiff,
                true,
                'FirstNameRMDiff@mail.com',
                'FirstNameRMDiff@mail.com',
                'rmUser',
                rmProfileId,
                rmRole.Id,
                tmUser.Id,
                userEmpIdRMDiff
            );
            insert rmUser;
        }
        return this;
    }
    public static User newUser(String firstName, String lastName, String employeeId, Boolean isActive, String profileId, String roleId, String managerId) {
        return  Mockup_Test.newUser(
                    firstName,
                    lastName,
                    isActive,
                    firstName+'@mail.com',
                    firstName+'@mail.com',
                    firstName.subString(0,4),
                    profileId,
                    roleId,
                    managerId,
                    employeeId
                );
    }
    public static User newUser(String firstName,String lastName,Boolean active,String userName,String email,String alias,String profileId,String roleId,String managerId,String emId) {
        User user = new User(
            FirstName = firstName,
            LastName = lastName,
            IsActive = active,
            Username = userName,
            Email = email,
            Alias = alias,
            TimeZoneSidKey = 'Asia/Bangkok',
            LocaleSidKey = 'th_TH',
            EmailEncodingKey = 'ISO-8859-1',
            LanguageLocaleKey = 'en_US',
            ProfileId = profileId,
            UserRoleId = roleId,
            ManagerId = managerId,
            Employee_ID__c = emId
        );
        return user;
    }
    public static User_Structure__c newUserStructure(String employeeId, String nhRcCode, String ahRcCode, String rcCode, String firstName, String lastName, String jobCode, String statusCode, Date effectiveDate) {
        User_Structure__c userStruc = new User_Structure__c(              
                Name = employeeId,
                NH_RC_Code__c = nhRcCode,
                AH_RC_Code__c = ahRcCode,
                RC_Code__c = rcCode,
                First_Name__c = firstName,
                Last_Name__c = lastName,
                Username__c = firstName +'@email.com',
                Email__c = firstName + '@email.com',
                Job_Code__c = jobCode,
                Status__c = statusCode,
                Effective_Date__c = effectiveDate
            );
        return userStruc;
    }
    public static Account newAccountObj(String accountName,String portPool,Id recordTypeId) {
        return Mockup_Test.newAccountObj(accountName, portPool, null, recordTypeId);
    }
    public static Account newAccountObj(String accountName,String portPool,String ownershipText,Id recordTypeId) {
        return Mockup_Test.newAccountWithSegment(accountName, portPool, ownershipText, recordTypeId, 'MI');
    }
    public static Account newAccountWithSegment(String accountName,String portPool,String ownershipText,String recordTypeId,String segment) {
        Account newAccount = new Account(
            Port_Pool__c = portPool,
            RecordTypeId = recordTypeId,
            Ownership_Text__c = ownershipText,
            Primary_Segment_Code__c = segment,
            Customer_Segment_Code__c = segment,
            Is_createby_Integration__c = true
        );
        if(GlobalUtility.getRecordTypeDevNameMapByIdFromSObject('Account').get(recordTypeId) == GlobalConstants.INDIVIDUAL_CUSTOMER_DEVNAME ||
            GlobalUtility.getRecordTypeDevNameMapByIdFromSObject('Account').get(recordTypeId) == GlobalConstants.INDIVIDUAL_PROSPECT_DEVNAME) {
            newAccount.LastName = accountName;
        } else {
            newAccount.Name = accountName;
        }
        return newAccount;
    }

    public Mockup_Test newAccount(String accountName,String portPool,String ownershipText,String recordTypeId) {
        return this.newAccount(accountName, portPool, ownershipText, recordtypeId, null, null);
    }

    public Mockup_Test newAccount(String accountName,String portPool,String recordTypeId) {
        return this.newAccount(accountName, portPool, null, recordtypeId, null, null);
    }
    public Mockup_Test newAccountWithPreviousOwner(String accountName,String portPool,Id previousOwnerId,Id permanentOwnerId,String recordTypeId) {
        return this.newAccount(accountName, portPool, null, recordtypeId, previousOwnerId, permanentOwnerId);
    }
    public Mockup_Test newAccount(String accountName,String portPool,String ownershipText,String recordTypeId,Id previousOwnerId,Id permanentOwnerId) {
        Account newAccount = new Account(
            Port_Pool__c = portPool,
            RecordTypeId = recordTypeId,
            Ownership_Text__c = ownershipText,
            Primary_Segment_Code__c = 'MI',
            Customer_Segment_Code__c = 'MI',
            Is_createby_Integration__c = true,
            Previous_Owner__c = previousOwnerId,
            Permanent_Owner__c = permanentOwnerId
        );
        if(GlobalUtility.getRecordTypeDevNameMapByIdFromSObject('Account').get(recordTypeId) == GlobalConstants.INDIVIDUAL_CUSTOMER_DEVNAME ||
            GlobalUtility.getRecordTypeDevNameMapByIdFromSObject('Account').get(recordTypeId) == GlobalConstants.INDIVIDUAL_PROSPECT_DEVNAME) {
            newAccount.LastName = accountName;
        } else {
            newAccount.Name = accountName;
        }
        insert newAccount;
        return this;
    }
    public Mockup_Test newAccountWithContact(String accountName,String contactName,String contactLastName,String portPool,String recordTypeId) {
        Account acc = new Account(
            Name = accountName,
            Port_Pool__c = portPool,
            RecordTypeId = recordTypeId,
            Is_createby_Integration__c = true
        );
        insert acc;
        
        insert new Contact(
            AccountId = acc.Id,
            Contact_Firstname__c = contactName,
            LastName = contactLastName,
            Phone_Numbers__c = '0000000000'
        );

        return this;
    }
    public static UserRole newRole(String name,String devName,String parentId) {
        return new UserRole(Name=name,DeveloperName=devName,ParentRoleId=parentId);
    }
    public static Campaign newCampaign(Id ownerId,String cname, Datetime startDateTime, Datetime endDateTime, Datetime attendeeDateTime, String status, String recTypeName,String ctype) {
        Campaign cmp =  new Campaign(
            OwnerId = ownerId,
            Name = cname,
            Lead_Campaign_Event_Code__c = cname.trim(),
            Start_Date_Time__c = startDateTime,
            End_Date_Time__c = endDateTime,
            StartDate = Date.newinstance(startDateTime.year(), startDateTime.month(), startDateTime.day()),
            EndDate = Date.newinstance(endDateTime.year(), endDateTime.month(), endDateTime.day()),
            Attendee_Confirmation_Date__c = attendeeDateTime,
            Status = status,
            RecordTypeId = getRecordTypeCampaignIdByName(recTypeName),
            Type__c = ctype
        );
        return cmp;
    }
    public static Campaign newCampaign(Id ownerId,String cname, Datetime startDateTime, Datetime endDateTime, Datetime attendeeDateTime, String status, String recTypeName,String ctype,String cSubtype) {
        Campaign cmp =  new Campaign(
            OwnerId = ownerId,
            Name = cname,
            Lead_Campaign_Event_Code__c = cname.trim(),
            Start_Date_Time__c = startDateTime,
            End_Date_Time__c = endDateTime,
            StartDate = Date.newinstance(startDateTime.year(), startDateTime.month(), startDateTime.day()),
            EndDate = Date.newinstance(endDateTime.year(), endDateTime.month(), endDateTime.day()),
            Attendee_Confirmation_Date__c = attendeeDateTime,
            Status = status,
            RecordTypeId = getRecordTypeCampaignIdByName(recTypeName),
            Type__c = ctype,
            Sub_Type__c = cSubtype
        );
        return cmp;
    }

    public static Campaign newCampaignSubTypeCBS(Id ownerId,String cname, Datetime startDateTime, Datetime endDateTime, Datetime attendeeDateTime, String status, String recTypeName,String ctype,String cSubtype) {
        Campaign cmp =  new Campaign(
            OwnerId = ownerId,
            Name = cname,
            Lead_Campaign_Event_Code__c = cname.trim(),
            Start_Date_Time__c = startDateTime,
            End_Date_Time__c = endDateTime,
            StartDate = Date.newinstance(startDateTime.year(), startDateTime.month(), startDateTime.day()),
            EndDate = Date.newinstance(endDateTime.year(), endDateTime.month(), endDateTime.day()),
            Attendee_Confirmation_Date__c = attendeeDateTime,
            Status = status,
            RecordTypeId = getRecordTypeCampaignIdByName(recTypeName),
            Type__c = ctype,
            Sub_Type_CBS__c = cSubtype
        );
        return cmp;
    }


    public static void newEvent(Id whatId, Datetime startDateTime, Datetime endDateTime) {
        insert new Event(
            StartDateTime = startDateTime,
            EndDateTime = endDateTime,
            WhatId = whatId
        );
    }
    public static void newCustomerRequest(Id accountId,String status,Id ownerId,String type,String reqOwnerType) {
        insert new Customer_Ownership_Request__c(
            CIS_ID__c = accountId,
            Approval_Status__c = status,
            Current_Owner__c = ownerId,
            OwnerId = ownerId,
            Request_Type__c = type,
            Reason__c = 'reason',
            Request_Ownership_Type__c = reqOwnerType
        );
    }
    public static void newAccountShare(Id userGroupId,Id accountId,String accountAccesslvl,String opAccesslvl) {
        insert new AccountShare(
            UserOrGroupId = userGroupId,
            AccountId = accountId,
            AccountAccessLevel = accountAccesslvl,
            OpportunityAccessLevel = opAccesslvl
        );
    }
    public static Opportunity newOpportunity(Id accId, String name, String stageName, String subMissionCh) {
        Opportunity opp = new Opportunity(
            AccountId   = accId,
            Name        = name,
            StageName   = stageName,
            Submission_Channel__c   = subMissionCh,
            Credit_Model__c = 'DLA',
            Submit_Issue__c = 'New Credit',
            Amount      = 10,
            CloseDate   = System.today() + 7,
            Tentative_Application_Submit_Date__c = System.today() + 7
        );
        return opp;
    }
    public static Opportunity newOpportunityWithAppHis(Id accId, String name, String stageName, String subMissionCh, Map<String, Object> mapFieldValue) {
        Opportunity opp = new Opportunity(
            AccountId   = accId,
            Name        = name,
            StageName   = stageName,
            Submission_Channel__c   = subMissionCh,
            Previous_Stage__c = null,
            Credit_Model__c = 'DLA',
            Submit_Issue__c = 'New Credit',
            Amount      = 10,
            CloseDate   = System.today() + 7,
            Tentative_Application_Submit_Date__c = System.today() + 7
        );
        if(mapFieldValue != null) {
            for(String eachField : mapFieldValue.keySet()) {
                opp.put(eachField, mapFieldValue.get(eachField));
            }
        }
        insert opp;
        Application_History__c appHis = new Application_History__c(
            OppName__c = opp.Id,
            RMCreditModel__c = 'DLA',
            RMSubmitChannel__c = 'Non CMAS',
            TentativeSubmitDate__c = System.today() + 1
        );
        insert appHis;
        return opp;
    }

    public static Opportunity newOpportunityWithAppHisWithAppNo(Id accId, String name, String stageName, String subMissionCh,String appNo, Map<String, Object> mapFieldValue) {
        Opportunity opp = new Opportunity(
            AccountId   = accId,
            Name        = name,
            StageName   = stageName,
            Submission_Channel__c   = subMissionCh,
            Previous_Stage__c = null,
            Credit_Model__c = 'DLA',
            Submit_Issue__c = 'New Credit',
            Amount      = 10,
            CloseDate   = System.today() + 7,
            APP2__c = appNo,
            Tentative_Application_Submit_Date__c = System.today() + 7
        );
        if(mapFieldValue != null) {
            for(String eachField : mapFieldValue.keySet()) {
                opp.put(eachField, mapFieldValue.get(eachField));
            }
        }
        insert opp;
        Application_History__c appHis = new Application_History__c(
            OppName__c = opp.Id,
            RMCreditModel__c = 'DLA',
            RMSubmitChannel__c = 'Non CMAS',
            TentativeSubmitDate__c = System.today() + 1
        );
        insert appHis;
        return opp;
    }

    public static Opportunity newOpportunityWithAppHis(Id accId, String name, String stageName, String subMissionCh) {
        return Mockup_Test.newOpportunityWithAppHis(accId, name, stageName, subMissionCh, null);
    }

    public static Task newTask(Id ownerId,Id taskWhatId) {
        Task newTask =  new Task(
            OwnerId = ownerId,
            WhatId = taskWhatId
        );
        return newTask;
    }
    public static Target_List__c newTargetList(Id accountId,Id leadId,String externalId,String targetListStatus) {
        Target_List__c newTargetList =  new Target_List__c(
            CIS_ID_Prospect_Name__c = accountId,
            Lead_Campaign__c = leadId,
            External_ID__c = externalId,
            Status__c = targetListStatus
        );
        return newTargetList;
    }

    public static Year_End_Assignment__c newYearEndAssignment(String cisID,String userFirstName,String ahRC_Code){
        Account account = Mockup_Test.getFirstAccountFromName(cisID, 'Id,CIS__c');
        Year_End_Assignment__c yearObj = new Year_End_Assignment__c(
            Status__c = GlobalConstants.STATUS_NEW,
            CIS_ID_Unique__c = account.Cis__c,
            CIS_ID__c = account.Id,
            AH_RC_Code__c = ahRC_Code,
            Owner_Employee_ID__c = [SELECT Id,Employee_ID__c FROM User WHERE Firstname=:userFirstName LIMIT 1][0].Employee_ID__c
        );
        return yearObj;    
    }

    public static TransactBP__c newTransact(String applicationNo,String cusOptionA,String cusOptionB,String cusOptionC,String cusOptionD,String uwFinalDecision){
        TransactBP__c transactObj = new TransactBP__c(
            Name = applicationNo,
            Application_No_From_BP_SF__c = applicationNo,
            Customer_Option_A__c = cusOptionA,
            Customer_Option_B__c = cusOptionB,
            Customer_Option_C__c = cusOptionC,
            Customer_Option_D__c = cusOptionD,
            UW_Final_Decision__c = uwFinalDecision
        );
        return transactObj;
    }

    public static Priority_Master_Table__c newPriorityMaster(String name,String pId,String pCode,String campCode,String priorityRank,String priorityGroup,String priorityNameMain1,String priorityNameMain2,String priorityNameSub,String pType){
        Priority_Master_Table__c newPriority1 = new Priority_Master_Table__c(
            Name = name,
            PID__c = pId,
            Pcode__c = pCode,
            Campcode__c = campCode,
            PriorityRank__c = priorityRank,
            ProductGroupPP__c = priorityGroup,
            ProductNameMain__c = priorityNameMain1,
            ProductNameMain2__c = priorityNameMain2,
            ProductNameSub__c = priorityNameSub,
            Ptype__c = pType
        );
        return newPriority1;
    }

    public static Application_History__c newApplicationHistory(Id oppId,String appNo,String creditModel,String resubmitRound,String submitChannel,Date tentativeSubmitDate, Decimal requestAmount){
        Application_History__c appHisObj = new Application_History__c(
            AppNum_NonCMAS__c = appNo,
            OppName__c = oppId,
            RMCreditModel__c = creditModel,
            RMSubmitRound__c = resubmitRound,
            RMSubmitChannel__c = submitChannel,
            TentativeSubmitDate__c = tentativeSubmitDate,
            RMActualRequestedAmt__c = requestAmount

        );
        return appHisObj;
    }

    public static void setUpTestForBottomUp() {
        TriggerHandler.bypass('TeamTriggerHandler');
        Mockup_Test mt = new Mockup_Test().setUpTestWithRCCodeCBS();

        Profile cbsFSVPProfile = getMapProfileByName(GlobalConstants.CBS_FSVP);
        Profile cbsAdminProfile = getMapProfileByName(GlobalConstants.CBS_ADMIN);
        Profile cbsTLProfile = getMapProfileByName(GlobalConstants.CBS_TL);
        Profile cbsTMProfile = getMapProfileByName(GlobalConstants.CBS_TM);
        Profile cbsRMProfile = getMapProfileByName(GlobalConstants.CBS_RM);
        
        List<BottomUpSettings__c>bottomUpSetttings = new List<BottomUpSettings__c>();
        BottomUpSettings__c fsvpBottomUpSetttings = new BottomUpSettings__c();
        fsvpBottomUpSetttings.SetupOwnerId = cbsFSVPProfile.Id;
        fsvpBottomUpSetttings.Edit_Bottom_Up_Table__c = true;
        fsvpBottomUpSetttings.Edit_Target_Table__c = true;
        BottomUpSettings__c cbsAdminBottomUpSetttings = new BottomUpSettings__c();
        cbsAdminBottomUpSetttings.SetupOwnerId = cbsAdminProfile.Id;
        cbsAdminBottomUpSetttings.Edit_Bottom_Up_Table__c = true;
        cbsAdminBottomUpSetttings.Edit_Target_Table__c = true;
        BottomUpSettings__c tlBottomUpSetttings = new BottomUpSettings__c();
        tlBottomUpSetttings.SetupOwnerId = cbsTLProfile.Id;
        tlBottomUpSetttings.Edit_Bottom_Up_Table__c = true;
        tlBottomUpSetttings.Edit_Target_Table__c = true;
        BottomUpSettings__c tmBottomUpSetttings = new BottomUpSettings__c();
        tmBottomUpSetttings.SetupOwnerId = cbsTMProfile.Id;
        tmBottomUpSetttings.Edit_Bottom_Up_Table__c = true;
        tmBottomUpSetttings.Edit_Target_Table__c = true;
        BottomUpSettings__c rmBottomUpSetttings = new BottomUpSettings__c();
        rmBottomUpSetttings.SetupOwnerId = cbsRMProfile.Id;
        rmBottomUpSetttings.Edit_Bottom_Up_Table__c = true;
        rmBottomUpSetttings.Edit_Target_Table__c = true;
        bottomUpSetttings.add(fsvpBottomUpSetttings);
        bottomUpSetttings.add(cbsAdminBottomUpSetttings);
        bottomUpSetttings.add(tlBottomUpSetttings);
        bottomUpSetttings.add(tmBottomUpSetttings);
        bottomUpSetttings.add(rmBottomUpSetttings);
        insert bottomUpSetttings;
        for(BottomUpSettings__c bottomUpSettting : bottomUpSetttings){
        }
        List<Team_Structure__c>teamStructures = new List<Team_Structure__c>();
        Team_Structure__c tsTL = new Team_Structure__c(
                RC_Code__c = TL_CB_RC_CODE,
                External_ID__c = 'TlTSExternalID'
            );
        Team_Structure__c tsTM = new Team_Structure__c(
                RC_Code__c = 'tmRCCode',
                External_ID__c = 'TmTSExternalID'
            );
        Team_Structure__c tsRM = new Team_Structure__c(
                RC_Code__c = 'rmRCCode',
                External_ID__c = 'Rm1TSExternalID'
            );
        teamStructures.add(tsTL);
        teamStructures.add(tsTM);
        teamStructures.add(tsRM);
        insert teamStructures;
        List<FSVP_Teams__c>fsvpTeams = new List<FSVP_Teams__c>();
        FSVP_Teams__c tlFsvpTeam = new FSVP_Teams__c();
        tlFsvpTeam.Employee_ID__c = TL_CB_RC_CODE;
        tlFsvpTeam.RC_Code__c = TL_CB_RC_CODE;
        tlFsvpTeam.Name = 'FSVPTeamFORTL';
        fsvpTeams.add(tlFsvpTeam);
        insert fsvpTeams;
        String currentYear = String.valueOf(System.now().yearGMT());
        List<Team_Target__c>teamTargets = new List<Team_Target__c>();
        Team_Target__c tlTeamTarget = new Team_Target__c();
        tlTeamTarget.External_ID__c = 'tlTeamTargetExtId';
        tlTeamTarget.Team_Name__c = [SELECT Id,Name,RC_Code__c FROM Team_Structure__c WHERE RC_Code__c =: TL_CB_RC_CODE AND External_ID__c = 'TlTSExternalID'].Id;
        tlTeamTarget.Year__c = currentYear;
        Team_Target__c tmTeamTarget = new Team_Target__c();
        tmTeamTarget.External_ID__c = 'tmTeamTargetExtId';
        tmTeamTarget.Team_Name__c = [SELECT Id,Name,RC_Code__c FROM Team_Structure__c WHERE RC_Code__c = 'tmRCCode'].Id;
        tmTeamTarget.Year__c = currentYear;
        Team_Target__c rmTeamTarget = new Team_Target__c();
        rmTeamTarget.External_ID__c = 'rmTeamTargetExtId';
        rmTeamTarget.Team_Name__c = [SELECT Id,Name,RC_Code__c FROM Team_Structure__c WHERE RC_Code__c = 'rmRCCode'].Id;
        rmTeamTarget.Year__c = currentYear;
        teamTargets.add(tlTeamTarget);
        teamTargets.add(tmTeamTarget);
        teamTargets.add(rmTeamTarget);
        insert teamTargets;

        Set<String> firstNames = new Set<String>{Mockup_Test.userFirstNameCBTL,Mockup_Test.userFirstNameCBTM,Mockup_Test.userFirstNameCBRM,Mockup_Test.userFirstNameCBRM2,Mockup_Test.userFirstNameCBSTL,Mockup_Test.userFirstNameCBTLSubordinate};
        List<User>cbsUsers = [SELECT Id,FirstName,AH_RC_Code__c FROM User WHERE FirstName IN: firstNames];
        Map<String,User>cbsUserMap = new Map<String,user>();
        for(User cbsUser:cbsUsers){
            cbsUserMap.put(cbsUser.FirstName,cbsUser);
        }
        User tlUser = cbsUserMap.get(Mockup_Test.userFirstNameCBTL);
        User tmUser = cbsUserMap.get(Mockup_Test.userFirstNameCBTM);
        User rm1User = cbsUserMap.get(Mockup_Test.userFirstNameCBRM);
        User rm2User = cbsUserMap.get(Mockup_Test.userFirstNameCBRM2);
        User stlUser = cbsUserMap.get(Mockup_Test.userFirstNameCBSTL);
        User tlSubOrUser = cbsUserMap.get(Mockup_Test.userFirstNameCBTLSubordinate);

        List<User_Extension__c>userExtensions = new List<User_Extension__c>();
        User_Extension__c tlUserExtension = new User_Extension__c();
        tlUserExtension.User__c = tlUser.Id;
        tlUserExtension.Team_Structure__c = tsTL.Id;
        User_Extension__c tmUserExtension = new User_Extension__c();
        tmUserExtension.User__c = tmUser.Id;
        tmUserExtension.Team_Structure__c = tsTM.Id;
        User_Extension__c rm1UserExtension = new User_Extension__c();
        rm1UserExtension.User__c = rm1User.Id;
        rm1UserExtension.Team_Structure__c = tsRM.Id;
        User_Extension__c rm2UserExtension = new User_Extension__c();
        rm2UserExtension.User__c = rm2User.Id;
        rm2UserExtension.Team_Structure__c = tsRM.Id;
        User_Extension__c stlUserExtension = new User_Extension__c();
        stlUserExtension.User__c = stlUser.Id;
        stlUserExtension.Team_Structure__c = tsTL.Id;
        User_Extension__c tlSubOrdinateUserExtension = new User_Extension__c();
        tlSubOrdinateUserExtension.User__c = tlSubOrUser.Id;
        tlSubOrdinateUserExtension.Team_Structure__c = tsTL.Id;
        userExtensions.add(tlUserExtension);
        userExtensions.add(tmUserExtension);
        userExtensions.add(rm1UserExtension);
        userExtensions.add(rm2UserExtension);
        userExtensions.add(stlUserExtension);
        userExtensions.add(tlSubOrdinateUserExtension);
        insert userExtensions;
        List<Sales_Target__c>salesTargets = new List<Sales_Target__c>();
        Sales_Target__c tlSalesTarget = new Sales_Target__c();
        tlSalesTarget.Name__c = tlUserExtension.Id;
        tlSalesTarget.Team_Target__c = tlTeamTarget.Id;
        tlSalesTarget.Year__c = currentYear;
        Sales_Target__c tmSalesTarget = new Sales_Target__c();
        tmSalesTarget.Name__c = tmUserExtension.Id;
        tmSalesTarget.Team_Target__c = tlTeamTarget.Id;
        tmSalesTarget.Year__c = currentYear;
        Sales_Target__c rm1SalesTarget = new Sales_Target__c();
        rm1SalesTarget.Name__c = rm1UserExtension.Id;
        rm1SalesTarget.Team_Target__c = tlTeamTarget.Id;
        rm1SalesTarget.Year__c = currentYear;
        Sales_Target__c rm2SalesTarget = new Sales_Target__c();
        rm2SalesTarget.Name__c = rm2UserExtension.Id;
        rm2SalesTarget.Team_Target__c = tlTeamTarget.Id;
        rm2SalesTarget.Year__c = currentYear;
        Sales_Target__c stlSalesTarget = new Sales_Target__c();
        stlSalesTarget.Name__c = stlUserExtension.Id;
        stlSalesTarget.Team_Target__c = tlTeamTarget.Id;
        stlSalesTarget.Year__c = currentYear;
        Sales_Target__c tlSubOrdinateSalesTarget = new Sales_Target__c();
        tlSubOrdinateSalesTarget.Name__c = tlSubOrdinateUserExtension.Id;
        tlSubOrdinateSalesTarget.Team_Target__c = tlTeamTarget.Id;
        tlSubOrdinateSalesTarget.Year__c = currentYear;
        salesTargets.add(tlSalesTarget);
        salesTargets.add(tmSalesTarget);
        salesTargets.add(rm1SalesTarget);
        salesTargets.add(rm2SalesTarget);
        salesTargets.add(stlSalesTarget);
        salesTargets.add(tlSubOrdinateSalesTarget);
        insert salesTargets;

        List<Account>customers = new List<Account>();
        Account testCustomer1 = new Account(Name='Customer1', Primary_Segment_Code__c = 'CB',
            Customer_Segment_Code__c = 'CB',
            Is_createby_Integration__c = true);
        Account testCustomer2 = new Account(Name='Customer2', Primary_Segment_Code__c = 'CB',
            Customer_Segment_Code__c = 'CB',
            Is_createby_Integration__c = true);
        customers.add(testCustomer1);
        customers.add(testCustomer2);
        insert customers;
        List<Bottom_Up_Annualized__c>bottomUps = new List<Bottom_Up_Annualized__c>();
        Bottom_Up_Annualized__c bottomUpCustomer1 = new Bottom_Up_Annualized__c();
        bottomUpCustomer1.Annaulized_Float__c = 0;
        bottomUpCustomer1.Annaulized_FX__c = 0;
        bottomUpCustomer1.Annualized_Cash__c = 0;
        bottomUpCustomer1.Annualized_KA__c = 0;
        bottomUpCustomer1.Annualized_LI__c = 0;
        bottomUpCustomer1.Annualized_SS__c = 0;
        bottomUpCustomer1.Annualized_TF__c = 0;
        bottomUpCustomer1.Asset_Bad_Flag__c = false;
        bottomUpCustomer1.BottomUp_BA__c = 0;
        bottomUpCustomer1.BottomUp_Cash__c = 0;
        bottomUpCustomer1.BottomUp_Derivative__c = 0;
        bottomUpCustomer1.BottomUp_Float__c = 0;
        bottomUpCustomer1.BottomUp_Front_End__c = 0;
        bottomUpCustomer1.BottomUp_FX__c = 0;
        bottomUpCustomer1.BottomUp_IBB__c = 0;
        bottomUpCustomer1.BottomUp_Investment_Fee__c = 0;
        bottomUpCustomer1.BottomUp_KA__c = 0;
        bottomUpCustomer1.BottomUp_LI__c = 0;
        bottomUpCustomer1.BottomUp_SS__c = 0;
        bottomUpCustomer1.BottomUp_TF__c = 0;
        bottomUpCustomer1.Business_Closed__c = 'No';
        bottomUpCustomer1.CIS_ID__c = testCustomer1.Id;
        bottomUpCustomer1.Credit_SOW_NII__c = 0;
        bottomUpCustomer1.Credit_Wallet_Size_NII__c = 0;
        bottomUpCustomer1.Credit_Wallet_Size_Out__c = 0;
        bottomUpCustomer1.Sales_Target__c = rm1SalesTarget.Id;
        bottomUpCustomer1.Year__c = currentYear;
        Bottom_Up_Annualized__c bottomUpCustomer2 = new Bottom_Up_Annualized__c();
        bottomUpCustomer2.Annaulized_Float__c = 1;
        bottomUpCustomer2.Annaulized_FX__c = 1;
        bottomUpCustomer2.Annualized_Cash__c = 1;
        bottomUpCustomer2.Annualized_KA__c = 1;
        bottomUpCustomer2.Annualized_LI__c = 1;
        bottomUpCustomer2.Annualized_SS__c = 1;
        bottomUpCustomer2.Annualized_TF__c = 1;
        bottomUpCustomer2.Asset_Bad_Flag__c = false;
        bottomUpCustomer2.BottomUp_BA__c = 1;
        bottomUpCustomer2.BottomUp_Cash__c = 1;
        bottomUpCustomer2.BottomUp_Derivative__c = 1;
        bottomUpCustomer2.BottomUp_Float__c = 1;
        bottomUpCustomer2.BottomUp_Front_End__c = 1;
        bottomUpCustomer2.BottomUp_FX__c = 1;
        bottomUpCustomer2.BottomUp_IBB__c = 1;
        bottomUpCustomer2.BottomUp_Investment_Fee__c = 1;
        bottomUpCustomer2.BottomUp_KA__c = 1;
        bottomUpCustomer2.BottomUp_LI__c = 1;
        bottomUpCustomer2.BottomUp_SS__c = 1;
        bottomUpCustomer2.BottomUp_TF__c = 1;
        bottomUpCustomer2.Business_Closed__c = 'No';
        bottomUpCustomer2.CIS_ID__c = testCustomer2.Id;
        bottomUpCustomer2.Credit_SOW_NII__c = 1;
        bottomUpCustomer2.Credit_Wallet_Size_NII__c = 1;
        bottomUpCustomer2.Credit_Wallet_Size_Out__c = 1;
        bottomUpCustomer2.Sales_Target__c = rm1SalesTarget.Id;
        bottomUpCustomer2.Year__c = currentYear;
        bottomUps.add(bottomUpCustomer1);
        bottomUps.add(bottomUpCustomer2);
        insert bottomUps;

        BottomUp_Notification_Settings__c toEnableBottomUpNotificationSetting = new BottomUp_Notification_Settings__c();
        toEnableBottomUpNotificationSetting.Enable_Notification__c = true;
        insert toEnableBottomUpNotificationSetting;
    
    }

    public static Business_Code__c newBusinessCode(String code,String segment){
        Business_Code__c bu = new Business_Code__c(Name=code,Segment__c=segment,External_ID__c=code+':'+segment);
        return bu;
    }

    public static Customer_Business_Code__c newCustomerBusinessCode(Account acc,Business_Code__c bu){
        Customer_Business_Code__c customerbusinessCode = new Customer_Business_Code__c(Name=Customer_BusinessCode_Service.getDefaultValue(),CIS__c = acc.id,Business_Code__c=bu.id, Account_Owner_Segment__c = acc.Owner.Segment__c,External__c = acc.CIS__c+':'+bu.External_ID__c);
        return customerbusinessCode;
    }

    public static LEC_Status_Master_Data__c newLECStatusMasterData(){
        LEC_Status_Master_Data__c lecStatusMasterData = new LEC_Status_Master_Data__c();
        lecStatusMasterData.Description__c = '23.01-ส่งงานให้สำนักงานทนายความ-ฝ่ายกฎหมายแล้ว';
        lecStatusMasterData.External__c = '23.01';
        lecStatusMasterData.Name = '23.01';
        insert lecStatusMasterData;
        return lecStatusMasterData;
    }
    public static List<LPM__c> newLPM(){
        List<LPM__c>lpms = new List<LPM__c>();
        LEC_Status_Master_Data__c lecStatusMasterData = newLECStatusMasterData();
        LPM__c lpm1 = new LPM__c();
        lpm1.Approve_Flag__c = false;
        lpm1.Count_Display_DPD__c = 'No';
        lpm1.DPD_Report__c = 0.0;
        lpm1.Generate_Lead__c = 'No';
        lpm1.LPM__c = '1';
        lpm1.LP_Outstanding__c = 0.0;
        lpm1.LTG_Flag__c = false;
        lpm1.Name = '1';
        lpm1.OD_Over_Limit_Flag__c = false;
        lpm1.Previous_DPD__c = 0.0;
        lpm1.LEC_Code_old__c = lecStatusMasterData.Id;
        lpms.add(lpm1);
        LPM__c lpm2 = new LPM__c();
        lpm2.Approve_Flag__c = false;
        lpm2.Count_Display_DPD__c = 'No';
        lpm2.DPD_Report__c = 0.0;
        lpm2.Generate_Lead__c = 'No';
        lpm2.LPM__c = '2';
        lpm2.LP_Outstanding__c = 0.0;
        lpm2.LTG_Flag__c = false;
        lpm2.Name = '2';
        lpm2.OD_Over_Limit_Flag__c = false;
        lpm2.Previous_DPD__c = 0.0;
        lpm2.LEC_Code_old__c = lecStatusMasterData.Id;
        lpms.add(lpm2);
        LPM__c lpm3 = new LPM__c();
        lpm3.Approve_Flag__c = false;
        lpm3.Count_Display_DPD__c = 'No';
        lpm3.DPD_Report__c = 0.0;
        lpm3.Generate_Lead__c = 'No';
        lpm3.LPM__c = '3';
        lpm3.LP_Outstanding__c = 0.0;
        lpm3.LTG_Flag__c = false;
        lpm3.Name = '3';
        lpm3.OD_Over_Limit_Flag__c = false;
        lpm3.Previous_DPD__c = 0.0;
        lpm3.LEC_Code_old__c = lecStatusMasterData.Id;
        lpms.add(lpm3);
        LPM__c lpm4 = new LPM__c();
        lpm4.Approve_Flag__c = false;
        lpm4.Count_Display_DPD__c = 'No';
        lpm4.DPD_Report__c = 0.0;
        lpm4.Generate_Lead__c = 'No';
        lpm4.LPM__c = '4';
        lpm4.LP_Outstanding__c = 0.0;
        lpm4.LTG_Flag__c = false;
        lpm4.Name = '4';
        lpm4.OD_Over_Limit_Flag__c = false;
        lpm4.Previous_DPD__c = 0.0;
        lpm4.LEC_Code_old__c = lecStatusMasterData.Id;
        lpms.add(lpm4);
        LPM__c lpm5 = new LPM__c();
        lpm5.Approve_Flag__c = false;
        lpm5.Count_Display_DPD__c = 'No';
        lpm5.DPD_Report__c = 0.0;
        lpm5.Generate_Lead__c = 'No';
        lpm5.LPM__c = '5';
        lpm5.LP_Outstanding__c = 0.0;
        lpm5.LTG_Flag__c = false;
        lpm5.Name = '5';
        lpm5.OD_Over_Limit_Flag__c = false;
        lpm5.Previous_DPD__c = 0.0;
        lpm5.LEC_Code_old__c = lecStatusMasterData.Id;
        lpms.add(lpm5);
        insert lpms;
        return lpms;
    } 

    public static Opportunity_Planning_Type__c newOpplanningCustomSetting(String name,String oppPlanType,Boolean allowEditamount,Boolean allowGroup,String submitIssue,String oppFieldToAmount,String opportunityType){
        Opportunity_Planning_Type__c oppPlanCS = new Opportunity_Planning_Type__c();
        oppPlanCS.Name = name;
        oppPlanCS.Type__c = oppPlanType;
        oppPlanCS.Allow_Edit_Amount__c = allowEditamount;
        oppPlanCS.Allow_Grouping__c = allowGroup;
        oppPlanCS.Submit_Issue_in_Opportunity__c = submitIssue;
        oppPlanCS.To_Opportunity_Amount__c = oppFieldToAmount;
        oppPlanCS.Opportunity_Type__c = opportunityType;
        return oppPlanCS;
    }

    public static Product_List_Master__c newProductMasterCBS(String groupName,Integer groupOrder,String productName,Integer productOrder,String recordtypeId){
        Product_List_Master__c productMaster = new Product_List_Master__c();
        productMaster.Product_Group__c = groupName;
        productMaster.Product_Group_Order__c = groupOrder;
        productMaster.Product_Name__c = productName;
        productMaster.Order_In_Group__c = productOrder;
        productMaster.Is_Active__c = true;
        productMaster.RecordTypeId = recordtypeId;
        return productMaster;
    }

    public static Product_List_Master__c newProductMasterSME(String productName,String recordTypeId,Integer priority){
        Product_List_Master__c productMaster = new Product_List_Master__c();
        productMaster.Product_Name__c = productName;
        productMaster.Priority__c = priority;
        productMaster.Is_Active__c = true;
        productMaster.RecordTypeId = recordTypeId;
        return productMaster;
    }



    public static CMAS__c  newCMAS(String cwuRefNo,String cmasRefNo,String appTypeCode,String cwuStatus,String businessCode,String cmasAppID,String creditType){
        CMAS__c cmasObj = new CMAS__c();
        cmasObj.Business_Code__c =  businessCode;
        cmasObj.CMAS_Calculated__c = false;
        cmasObj.CMAS_App_Id__c = cmasAppID;
        cmasObj.CMAS_App_Type__c = appTypeCode;
        cmasObj.CMAS_Reference_Number__c = cmasRefNo;
        cmasObj.Credit_Type_Code__c = creditType;
        cmasObj.CWU_REF_No__c = cwuRefNo;
        cmasObj.CWU_Status__c = cwuStatus;
        cmasObj.Industry_Code__c = '1.1';
        return cmasObj;
    }

    public static CMAS_Fac_Info__c  newCMAS_FAC(String cmasAppID,String facCode,Decimal existing,Decimal approved,Decimal propose){
        CMAS_Fac_Info__c facObj = new CMAS_Fac_Info__c();
        Datetime todatDT = Datetime.now();
        String randomString = todatDT.format('ddMMyyyy\'T\'hhmmss\'Z\'SSS');
        facObj.CMAC_FAC_Active__c = true;
        facObj.CMAS_FAC_Calculated__c = false;
        facObj.CMAS_Facility_Id__c = randomString;
        facObj.CMAS_App_Id__c = cmasAppID;
        facObj.Facility_Code__c = facCode;
        facObj.Facility_Created_By__c = 'rmtest01';
        facObj.Facility_Exiting__c = existing;
        facObj.Facility_Last_Updated_By__c = 'uwtest01';
        facObj.Facility_Limit_Approved__c =  approved;
        facObj.Facility_Limit_Proposed__c = propose;
        facObj.Facility_One_Time_Credit_Use_Flag__c = '';
        facObj.Facility_Status_Code__c = 'Y';
        return facObj;
    }

    public static CMAS_Workflow_History__c  newCMAS_Workflow(String cmasAppID,String fromStatus,String toStatus){
        CMAS_Workflow_History__c wfObj = new CMAS_Workflow_History__c();
        Datetime todatDT = Datetime.now();
        String randomString = todatDT.format('ddMMyyyy\'T\'hhmmss\'Z\'SSS');
        wfObj.WorkFlow_Transaction_Id__c = randomString;
        wfObj.CMAS_App_Id__c = cmasAppID;
        Datetime fromDate = Datetime.now();
        wfObj.From_Date__c = fromDate;
        wfObj.From_Status__c = fromStatus;
        wfObj.From_User__c = 'uwtest01';
        Datetime toDate = Datetime.now();
        wfObj.To_Date__c = toDate;
        wfObj.To_Status__c =  toStatus;
        wfObj.To_User__c = 'uwtest01';
        return wfObj;
    }

    public static Account getFirstAccountFromName(String inputNameToSearch, String inputField){
        List<Account> accountList = getAllAccountFromName(inputNameToSearch, inputField);
        if(accountList.isEmpty()) return null;
        else return accountList[0];
    }

    public static List<Account> getAllAccountFromName(String inputNameToSearch, String inputField){
        List<Account> queryResults = new List<Account>();
        Boolean isContainName = false;
        for(String eachInputFiled : inputField.toLowerCase().split(',')) {
            if(eachInputFiled.trim() == 'name') {
                isContainName = true;
            }
        }
        if(!isContainName) {
            inputField = 'Name, '+ inputField;
        }
        String stringQuery = 'SELECT '+inputField+' FROM Account';
        for(Account eachAccount : (List<Account>) Database.query(stringQuery)) {
            if(eachAccount.Name == inputNameToSearch) {
                queryResults.add(eachAccount);    
            }
        }
        return queryResults;
    }

    public static Contact getFirstContactFromFirstName(String inputNameToSearch, String inputField){
        return getAllContactFromFirstName(inputNameToSearch, inputField)[0];
    }

    public static List<Contact> getAllContactFromFirstName(String inputNameToSearch, String inputField){
        List<Contact> queryResults = new List<Contact>();
        String stringQuery = 'SELECT '+inputField+' FROM Contact';
        for(Contact eachContact : (List<Contact>) Database.query(stringQuery)) {
            if(eachContact.FirstName == inputNameToSearch) {
                queryResults.add(eachContact);    
            }
        }
        return queryResults;
    }

    public static Global_Master_Data__c newAllLeadResponse(String campaignCode,String type,String responseLv1,String responseLv2,Boolean requireLv2,Boolean requireMemo,String team){
        Id leadResponseRecType = GlobalUtility.getRecordTypeId('Global_Master_Data__c', 'LeadResponse');
        Global_Master_Data__c response = new Global_Master_Data__c();
        response.RecordTypeId = leadResponseRecType;
        response.LeadResponse_Campaign_Code__c = campaignCode;
        response.LeadResponse_Type__c = type;
        response.LeadResponse_Response_Level1__c = responseLv1;
        response.LeadResponse_Response_Level2__c = responseLv2;
        response.LeadResponse_Required_Level2__c = requireLv2;
        response.LeadResponse_Required_Memo__c = requireMemo;
        response.LeadResponse_Team__c = team;
        return response;
    }

    public static Team_Structure__c newTeamStructure(String rcCode,Id ownerId){
        Team_Structure__c newTeam = new Team_Structure__c(
                RC_Code__c = rcCode,
                External_ID__c = rcCode,
                OwnerId = ownerId
            );
        return newTeam;
    }
}